{"file_contents":{"debug-import.js":{"content":"const fs = require('fs');\nconst path = require('path');\nconst XLSX = require('xlsx');\n\n// Test the image extraction and assignment logic\nconst testImageAssignment = async () => {\n  try {\n    // Read the Excel file\n    const filePath = 'attached_assets/House Of Clarence1_1752488521619.xlsx';\n    const data = fs.readFileSync(filePath);\n    const workbook = XLSX.read(data, { type: 'buffer' });\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n    \n    // Simulate the image map (use some dummy image URLs)\n    const imageMap = {\n      'xl/media/image1.png': '/uploads/extracted-images/image1.png',\n      'xl/media/image2.png': '/uploads/extracted-images/image2.png',\n      'xl/media/image3.png': '/uploads/extracted-images/image3.png',\n    };\n    \n    // Test the getImageForProduct function\n    const getImageForProduct = (imageMap, rowIndex, productCode) => {\n      const images = Object.values(imageMap);\n      if (images.length === 0) return null;\n      \n      // Simple distribution: assign images in order\n      const imageIndex = Math.floor((rowIndex - 1) % images.length);\n      return images[imageIndex] || null;\n    };\n    \n    // Find header row\n    let headerRowIndex = -1;\n    for (let i = 0; i < jsonData.length; i++) {\n      const row = jsonData[i] || [];\n      if (row.some(cell => \n        typeof cell === 'string' && \n        (cell.toLowerCase().includes('product') || \n         cell.toLowerCase().includes('category') || \n         cell.toLowerCase().includes('price'))\n      )) {\n        headerRowIndex = i;\n        break;\n      }\n    }\n    \n    console.log('Header row index:', headerRowIndex);\n    console.log('Headers:', jsonData[headerRowIndex]);\n    \n    // Test image assignment for first few products\n    for (let i = headerRowIndex + 1; i < Math.min(headerRowIndex + 6, jsonData.length); i++) {\n      const row = jsonData[i] || [];\n      if (row.every(cell => !cell || cell === '')) continue;\n      \n      const productCode = row[0] || `AUTO-${Date.now()}-${i}`;\n      const imageUrl = getImageForProduct(imageMap, i, productCode);\n      console.log(`Row ${i}: Product ${productCode} -> Image: ${imageUrl}`);\n    }\n    \n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\ntestImageAssignment();","size_bytes":2320},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# House of Clarence Business OS\n\n## Overview\n\nHouse of Clarence Business OS is a comprehensive business management platform built for the home improvement and construction industry. It's designed to manage products, contractors, quotes, orders, and suppliers in a unified system. The application uses a modern full-stack architecture with React frontend, Express backend, and PostgreSQL database.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with custom design system\n- **UI Components**: Radix UI primitives with shadcn/ui components\n- **State Management**: React Query (TanStack Query) for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Neon serverless connection\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with consistent error handling\n- **Development**: Hot reload with tsx for server-side development\n\n### Database Design\n- **Schema**: Defined in shared/schema.ts using Drizzle\n- **Tables**: Products, Contractors, Quotes, Orders, Suppliers\n- **Migrations**: Managed through Drizzle Kit\n- **Relationships**: Foreign keys between quotes/orders and contractors\n\n## Key Components\n\n### Data Models\n- **Products**: Catalog with pricing, specifications, and supplier info\n- **Contractors**: Client management with project history and financials\n- **Quotes**: Quote generation and tracking system\n- **Orders**: Order management and fulfillment\n- **Suppliers**: Vendor relationship management\n\n### UI Components\n- **Dashboard**: Central hub with KPIs and quick actions\n- **Product Catalog**: Search, filter, and manage product inventory\n- **Contractor Management**: Track relationships and project history\n- **Quote Builder**: Dynamic quote creation with product selection\n- **Order Management**: Track orders from creation to delivery\n- **Supplier Management**: Vendor performance and relationship tracking\n- **Analytics**: Business insights and reporting\n\n### Shared Utilities\n- **Schema Validation**: Zod schemas for type safety\n- **Query Client**: Centralized API request handling\n- **Form Validation**: Hookform resolvers with Zod\n- **Toast Notifications**: User feedback system\n\n## Data Flow\n\n1. **Client Requests**: React components use React Query hooks\n2. **API Layer**: Express routes handle CRUD operations\n3. **Database Operations**: Drizzle ORM manages PostgreSQL interactions\n4. **Response Handling**: Type-safe data returns to frontend\n5. **UI Updates**: React Query handles cache invalidation and updates\n\n### Key Data Flows\n- **Product Management**: CRUD operations with real-time updates\n- **Excel Import**: ✅ FULLY OPERATIONAL - 141 products with correctly aligned images AND prices successfully imported\n- **PDF Import**: Construction document parsing and automatic product extraction\n- **Quote Generation**: Multi-step process with product selection\n- **Order Processing**: Status tracking from creation to delivery\n- **Analytics**: Real-time calculations from database aggregations\n- **AI Chat**: Natural language querying of business data using OpenAI\n- **Mood Board Analysis**: Visual product matching and design inspiration\n- **Victorian Reference System**: Historical design comparison and analysis\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL connection management\n- **drizzle-orm**: Type-safe database operations\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **zod**: Schema validation library\n- **react-hook-form**: Form state management\n\n### Development Tools\n- **vite**: Fast build tool and dev server\n- **tsx**: TypeScript execution for Node.js\n- **drizzle-kit**: Database migration tool\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n\n## Deployment Strategy\n\n### Build Process\n1. **Frontend Build**: Vite builds React app to dist/public\n2. **Backend Build**: ESBuild bundles server code to dist/index.js\n3. **Database**: Drizzle migrations run automatically\n4. **Static Assets**: Served from build output directory\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string\n- **NODE_ENV**: Environment mode (development/production)\n- **Session Management**: PostgreSQL-backed sessions\n\n### Development Workflow\n- **Local Development**: npm run dev starts both frontend and backend\n- **Database Management**: npm run db:push for schema changes\n- **Type Safety**: Shared types between frontend and backend\n- **Hot Reload**: Full-stack development with instant updates\n\n### Production Considerations\n- **Server-side Rendering**: Vite handles production builds\n- **Database Connections**: Neon serverless handles scaling\n- **Error Handling**: Comprehensive error boundaries and logging\n- **Security**: Input validation, CORS, and secure sessions","size_bytes":5291},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/ai-chat.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"./storage\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport class AIChatService {\n  async processBusinessQuery(userMessage: string): Promise<string> {\n    try {\n      // First, analyze the user's intent and extract search parameters\n      const intentResponse = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a business data analysis assistant for House of Clarence Business OS. Analyze the user's query and determine what type of business information they're looking for. \n\n            Respond with JSON in this format:\n            {\n              \"intent\": \"products\" | \"contractors\" | \"quotes\" | \"orders\" | \"suppliers\" | \"analytics\" | \"general_info\",\n              \"parameters\": {\n                \"category\": \"string or null\",\n                \"priceRange\": {\"min\": number, \"max\": number} or null,\n                \"supplier\": \"string or null\",\n                \"contractor\": \"string or null\",\n                \"dateRange\": {\"from\": \"string\", \"to\": \"string\"} or null,\n                \"status\": \"string or null\"\n              },\n              \"query\": \"reformulated search query\"\n            }`\n          },\n          {\n            role: \"user\",\n            content: userMessage\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const intent = JSON.parse(intentResponse.choices[0].message.content || \"{}\");\n      \n      let businessData: any = {};\n      \n      // Fetch relevant business data based on intent\n      switch (intent.intent) {\n        case \"products\":\n          businessData.products = await storage.getProducts();\n          break;\n        case \"contractors\":\n          businessData.contractors = await storage.getContractors();\n          break;\n        case \"quotes\":\n          businessData.quotes = await storage.getQuotes();\n          break;\n        case \"orders\":\n          businessData.orders = await storage.getOrders();\n          break;\n        case \"suppliers\":\n          businessData.suppliers = await storage.getSuppliers();\n          break;\n        case \"analytics\":\n          businessData = {\n            products: await storage.getProducts(),\n            contractors: await storage.getContractors(),\n            quotes: await storage.getQuotes(),\n            orders: await storage.getOrders(),\n            suppliers: await storage.getSuppliers()\n          };\n          break;\n        default:\n          businessData = {\n            products: await storage.getProducts(),\n            contractors: await storage.getContractors(),\n            quotes: await storage.getQuotes(),\n            orders: await storage.getOrders(),\n            suppliers: await storage.getSuppliers()\n          };\n      }\n\n      // Generate natural language response based on the data\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a helpful business data assistant for House of Clarence Business OS. \n            \n            Provide clear, professional responses about business data including:\n            - Product catalog information (specs, pricing, suppliers, lead times)\n            - Contractor relationships and project details\n            - Quote generation and tracking\n            - Order management and fulfillment\n            - Supplier performance and relationships\n            - Business analytics and insights\n            \n            Format your responses with:\n            - Key information in bullet points when appropriate\n            - Price formatting with £ symbol and commas\n            - Clear summaries and actionable insights\n            - Professional tone suitable for business use\n            \n            Focus on helping users understand their business performance, find products, analyze trends, and make informed decisions.`\n          },\n          {\n            role: \"user\",\n            content: `User asked: \"${userMessage}\"\n            \n            Business data retrieved:\n            ${JSON.stringify(businessData, null, 2)}\n            \n            Please provide a helpful response based on this data.`\n          }\n        ]\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't process your request.\";\n      \n    } catch (error) {\n      console.error(\"AI Chat Error:\", error);\n      return \"I'm sorry, I encountered an error while processing your request. Please try again.\";\n    }\n  }\n}\n\nexport const aiChatService = new AIChatService();","size_bytes":4800},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Initialize Victorian references with default examples\n  const { victorianReferenceService } = await import(\"./victorian-reference-service\");\n  await victorianReferenceService.createDefaultReferences();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2131},"server/property-api.ts":{"content":"// Property Data API Configuration\nconst PROPERTY_API_KEY = \"NGMENHMFDP\";\n\n// Mock property data service - replace with actual API calls\nexport class PropertyDataService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = PROPERTY_API_KEY;\n  }\n\n  async searchProperties(query: string): Promise<any[]> {\n    // This would typically make an API call to your property data service\n    // For now, returning mock data structure\n    return [\n      {\n        id: \"prop_001\",\n        address: \"123 Main Street, London, SW1A 1AA\",\n        price: 850000,\n        bedrooms: 3,\n        bathrooms: 2,\n        squareFeet: 1200,\n        propertyType: \"Apartment\",\n        yearBuilt: 2015,\n        features: [\"Parking\", \"Garden\", \"Modern Kitchen\"],\n        neighborhood: \"Westminster\",\n        pricePerSqFt: 708.33,\n        marketValue: 850000,\n        lastSold: \"2023-01-15\",\n        status: \"For Sale\"\n      },\n      {\n        id: \"prop_002\", \n        address: \"456 Oak Avenue, London, N1 2BC\",\n        price: 1200000,\n        bedrooms: 4,\n        bathrooms: 3,\n        squareFeet: 1800,\n        propertyType: \"House\",\n        yearBuilt: 1995,\n        features: [\"Garden\", \"Garage\", \"Fireplace\"],\n        neighborhood: \"Islington\",\n        pricePerSqFt: 666.67,\n        marketValue: 1200000,\n        lastSold: \"2023-06-20\",\n        status: \"For Sale\"\n      }\n    ];\n  }\n\n  async getPropertyDetails(propertyId: string): Promise<any> {\n    // Mock property details\n    return {\n      id: propertyId,\n      address: \"123 Main Street, London, SW1A 1AA\",\n      price: 850000,\n      bedrooms: 3,\n      bathrooms: 2,\n      squareFeet: 1200,\n      propertyType: \"Apartment\",\n      yearBuilt: 2015,\n      features: [\"Parking\", \"Garden\", \"Modern Kitchen\"],\n      neighborhood: \"Westminster\",\n      pricePerSqFt: 708.33,\n      marketValue: 850000,\n      lastSold: \"2023-01-15\",\n      status: \"For Sale\",\n      description: \"Beautiful modern apartment in prime Westminster location\",\n      amenities: [\"Gym\", \"Concierge\", \"Roof Terrace\"],\n      transport: [\"Underground: 5 mins\", \"Bus: 2 mins\"],\n      schools: [\"Primary: Outstanding\", \"Secondary: Good\"],\n      priceHistory: [\n        { date: \"2023-01-15\", price: 850000 },\n        { date: \"2022-01-15\", price: 780000 },\n        { date: \"2021-01-15\", price: 750000 }\n      ]\n    };\n  }\n\n  async getMarketAnalysis(area: string): Promise<any> {\n    // Mock market analysis\n    return {\n      area: area,\n      averagePrice: 925000,\n      priceChange: {\n        monthly: 2.5,\n        yearly: 8.3\n      },\n      inventory: 150,\n      daysOnMarket: 45,\n      pricePerSqFt: {\n        average: 687,\n        range: { min: 450, max: 1200 }\n      },\n      propertyTypes: {\n        apartments: { count: 80, avgPrice: 750000 },\n        houses: { count: 70, avgPrice: 1100000 }\n      }\n    };\n  }\n}\n\nexport const propertyDataService = new PropertyDataService();","size_bytes":2887},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertContractorSchema, insertQuoteSchema, insertOrderSchema, insertSupplierSchema } from \"@shared/schema\";\nimport { aiChatService } from \"./ai-chat\";\nimport { uploadMiddleware, importProductsFromExcel } from \"./upload-service\";\nimport { moodBoardAnalyzer } from \"./moodboard-analyzer\";\nimport { victorianReferenceService } from \"./victorian-reference-service\";\nimport multer from \"multer\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve static files for extracted images\n  app.use('/uploads/extracted-images', express.static(path.join(process.cwd(), 'uploads', 'extracted-images')));\n  \n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(parseInt(req.params.id));\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.updateProduct(parseInt(req.params.id), req.body);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProduct(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json({ message: \"Product deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Contractors\n  app.get(\"/api/contractors\", async (req, res) => {\n    try {\n      const contractors = await storage.getContractors();\n      res.json(contractors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contractors\" });\n    }\n  });\n\n  app.get(\"/api/contractors/:id\", async (req, res) => {\n    try {\n      const contractor = await storage.getContractor(parseInt(req.params.id));\n      if (!contractor) {\n        return res.status(404).json({ message: \"Contractor not found\" });\n      }\n      res.json(contractor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contractor\" });\n    }\n  });\n\n  app.post(\"/api/contractors\", async (req, res) => {\n    try {\n      const validatedData = insertContractorSchema.parse(req.body);\n      const contractor = await storage.createContractor(validatedData);\n      res.status(201).json(contractor);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contractor data\" });\n    }\n  });\n\n  app.patch(\"/api/contractors/:id\", async (req, res) => {\n    try {\n      const contractor = await storage.updateContractor(parseInt(req.params.id), req.body);\n      if (!contractor) {\n        return res.status(404).json({ message: \"Contractor not found\" });\n      }\n      res.json(contractor);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update contractor\" });\n    }\n  });\n\n  app.delete(\"/api/contractors/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteContractor(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ message: \"Contractor not found\" });\n      }\n      res.json({ message: \"Contractor deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete contractor\" });\n    }\n  });\n\n  // Quotes\n  app.get(\"/api/quotes\", async (req, res) => {\n    try {\n      const quotes = await storage.getQuotes();\n      res.json(quotes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch quotes\" });\n    }\n  });\n\n  app.get(\"/api/quotes/:id\", async (req, res) => {\n    try {\n      const quote = await storage.getQuote(parseInt(req.params.id));\n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      res.json(quote);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch quote\" });\n    }\n  });\n\n  app.post(\"/api/quotes\", async (req, res) => {\n    try {\n      const validatedData = insertQuoteSchema.parse(req.body);\n      const quote = await storage.createQuote(validatedData);\n      res.status(201).json(quote);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid quote data\" });\n    }\n  });\n\n  app.patch(\"/api/quotes/:id\", async (req, res) => {\n    try {\n      const quote = await storage.updateQuote(parseInt(req.params.id), req.body);\n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      res.json(quote);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update quote\" });\n    }\n  });\n\n  app.delete(\"/api/quotes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteQuote(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      res.json({ message: \"Quote deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete quote\" });\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(parseInt(req.params.id));\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(validatedData);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.updateOrder(parseInt(req.params.id), req.body);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteOrder(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json({ message: \"Order deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete order\" });\n    }\n  });\n\n  // Suppliers\n  app.get(\"/api/suppliers\", async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch suppliers\" });\n    }\n  });\n\n  app.get(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      const supplier = await storage.getSupplier(parseInt(req.params.id));\n      if (!supplier) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json(supplier);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch supplier\" });\n    }\n  });\n\n  app.post(\"/api/suppliers\", async (req, res) => {\n    try {\n      const validatedData = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(validatedData);\n      res.status(201).json(supplier);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid supplier data\" });\n    }\n  });\n\n  app.patch(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      const supplier = await storage.updateSupplier(parseInt(req.params.id), req.body);\n      if (!supplier) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json(supplier);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update supplier\" });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSupplier(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json({ message: \"Supplier deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete supplier\" });\n    }\n  });\n\n  // AI Chat endpoint\n  app.post(\"/api/ai-chat\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      const response = await aiChatService.processBusinessQuery(message);\n      res.json({ response });\n    } catch (error) {\n      console.error(\"AI Chat Error:\", error);\n      res.status(500).json({ error: \"Failed to process chat message\" });\n    }\n  });\n\n  // Mood Board Analysis endpoint\n  const moodboardUpload = multer({\n    dest: 'uploads/moodboards/',\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'));\n      }\n    },\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    }\n  }).single('moodboard');\n\n  app.post(\"/api/analyze-moodboard\", moodboardUpload, async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image uploaded\" });\n      }\n\n      const analysis = await moodBoardAnalyzer.analyzeMoodBoard(req.file.path);\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Mood board analysis error:\", error);\n      res.status(500).json({ error: \"Failed to analyze mood board\" });\n    }\n  });\n\n  // Victorian Reference Management endpoints\n  const victorianUpload = multer({\n    dest: 'uploads/victorian-references/',\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'));\n      }\n    },\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    }\n  }).single('victorian-image');\n\n  app.post(\"/api/save-victorian-reference\", victorianUpload, async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image uploaded\" });\n      }\n\n      const imageBuffer = require('fs').readFileSync(req.file.path);\n      const reference = await victorianReferenceService.saveVictorianReference(\n        imageBuffer, \n        req.file.originalname\n      );\n      \n      // Clean up uploaded file\n      require('fs').unlinkSync(req.file.path);\n      \n      res.json(reference);\n    } catch (error) {\n      console.error(\"Victorian reference save error:\", error);\n      res.status(500).json({ error: \"Failed to save Victorian reference\" });\n    }\n  });\n\n  app.get(\"/api/victorian-references\", async (req, res) => {\n    try {\n      const references = await victorianReferenceService.getAllReferences();\n      res.json(references);\n    } catch (error) {\n      console.error(\"Error fetching Victorian references:\", error);\n      res.status(500).json({ error: \"Failed to fetch Victorian references\" });\n    }\n  });\n\n  app.get(\"/api/victorian-references/search\", async (req, res) => {\n    try {\n      const { style, features, colors, materials } = req.query;\n      const searchCriteria = {\n        style: style as string,\n        features: features ? (features as string).split(',') : undefined,\n        colors: colors ? (colors as string).split(',') : undefined,\n        materials: materials ? (materials as string).split(',') : undefined,\n      };\n      \n      const matchingReferences = await victorianReferenceService.findMatchingReferences(searchCriteria);\n      res.json(matchingReferences);\n    } catch (error) {\n      console.error(\"Error searching Victorian references:\", error);\n      res.status(500).json({ error: \"Failed to search Victorian references\" });\n    }\n  });\n\n  app.post(\"/api/victorian-references/:id/compare\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comparison = await victorianReferenceService.compareWithCatalogue(id);\n      res.json(comparison);\n    } catch (error) {\n      console.error(\"Error comparing Victorian reference:\", error);\n      res.status(500).json({ error: \"Failed to compare with catalogue\" });\n    }\n  });\n\n  // Excel Upload endpoint\n  app.post(\"/api/upload-excel\", uploadMiddleware, async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const results = await importProductsFromExcel(req.file.path);\n      \n      res.json({\n        message: \"Excel file processed successfully\",\n        results: {\n          imported: results.success,\n          errors: results.errors\n        }\n      });\n    } catch (error) {\n      console.error(\"Excel Upload Error:\", error);\n      res.status(500).json({ error: \"Failed to process Excel file\" });\n    }\n  });\n\n  // PDF upload endpoint for construction finishes\n  app.post(\"/api/upload-pdf\", uploadMiddleware, async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No PDF file uploaded\" });\n      }\n\n      const { importProductsFromPDF } = await import(\"./pdf-parser\");\n      const results = await importProductsFromPDF(req.file.path);\n      \n      res.json({\n        message: \"PDF file processed successfully\",\n        results: {\n          imported: results.success,\n          errors: results.errors\n        }\n      });\n    } catch (error) {\n      console.error(\"PDF Upload Error:\", error);\n      res.status(500).json({ error: \"Failed to process PDF file\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14853},"server/storage.ts":{"content":"import { \n  products, contractors, quotes, orders, suppliers,\n  type Product, type InsertProduct,\n  type Contractor, type InsertContractor,\n  type Quote, type InsertQuote,\n  type Order, type InsertOrder,\n  type Supplier, type InsertSupplier\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n  clearAllProducts(): Promise<void>;\n\n  // Contractors\n  getContractors(): Promise<Contractor[]>;\n  getContractor(id: number): Promise<Contractor | undefined>;\n  createContractor(contractor: InsertContractor): Promise<Contractor>;\n  updateContractor(id: number, contractor: Partial<InsertContractor>): Promise<Contractor | undefined>;\n  deleteContractor(id: number): Promise<boolean>;\n\n  // Quotes\n  getQuotes(): Promise<Quote[]>;\n  getQuote(id: number): Promise<Quote | undefined>;\n  createQuote(quote: InsertQuote): Promise<Quote>;\n  updateQuote(id: number, quote: Partial<InsertQuote>): Promise<Quote | undefined>;\n  deleteQuote(id: number): Promise<boolean>;\n\n  // Orders\n  getOrders(): Promise<Order[]>;\n  getOrder(id: number): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order | undefined>;\n  deleteOrder(id: number): Promise<boolean>;\n\n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: number): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: number, supplier: Partial<InsertSupplier>): Promise<Supplier | undefined>;\n  deleteSupplier(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<number, Product>;\n  private contractors: Map<number, Contractor>;\n  private quotes: Map<number, Quote>;\n  private orders: Map<number, Order>;\n  private suppliers: Map<number, Supplier>;\n  private currentProductId: number = 1;\n  private currentContractorId: number = 1;\n  private currentQuoteId: number = 1;\n  private currentOrderId: number = 1;\n  private currentSupplierId: number = 1;\n\n  constructor() {\n    this.products = new Map();\n    this.contractors = new Map();\n    this.quotes = new Map();\n    this.orders = new Map();\n    this.suppliers = new Map();\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize with real data from the spreadsheet\n    const initialProducts = [\n      { \n        productCode: 'KWO001', \n        category: 'KITCHEN', \n        subCategory: 'Worktop', \n        type: 'Sintered Stone Worktop', \n        specs: 'Premium 20mm Calacatta', \n        hocPrice: '2850.00', \n        ukPrice: '4500.00', \n        leadTime: 4, \n        moq: 1, \n        supplier: 'Lusso Stone',\n        link: 'https://lussostone.com/sintered'\n      },\n      { \n        productCode: 'KOC001', \n        category: 'KITCHEN', \n        subCategory: 'Overhead cabinets', \n        type: 'German Kitchen Cabinets', \n        specs: 'Häcker Systemat Range', \n        hocPrice: '3200.00', \n        ukPrice: '5100.00', \n        leadTime: 6, \n        moq: 1, \n        supplier: 'Häcker'\n      },\n      { \n        productCode: 'KOU001', \n        category: 'KITCHEN', \n        subCategory: 'Other Units', \n        type: 'Island Unit', \n        specs: '2400x1200mm with storage', \n        hocPrice: '4800.00', \n        ukPrice: '7500.00', \n        leadTime: 8, \n        moq: 1, \n        supplier: 'Häcker'\n      },\n      { \n        productCode: 'BBA001', \n        category: 'BATHROOMS', \n        subCategory: 'Family Bathroom', \n        type: 'Basin+Vanity Unit', \n        specs: 'Wooden Vanity Unit 1500mm', \n        hocPrice: '980.00', \n        ukPrice: '1580.00', \n        leadTime: 3, \n        moq: 1, \n        supplier: 'Lusso Stone',\n        link: 'https://lussostone.com/products/tiffany-velvet-beige'\n      },\n      { \n        productCode: 'BBA002', \n        category: 'BATHROOMS', \n        subCategory: 'Family Bathroom', \n        type: 'Basin Faucet', \n        specs: 'Regal Brushed SS Crosshead 3-Hole', \n        hocPrice: '134.00', \n        ukPrice: '214.17', \n        leadTime: 2, \n        moq: 2, \n        supplier: 'Lusso Stone',\n        link: 'https://lussostone.com/products/regal-brushed'\n      },\n      { \n        productCode: 'BWC001', \n        category: 'BATHROOMS', \n        subCategory: 'Family Bathroom', \n        type: 'WC', \n        specs: 'Rimless Back to Wall WC Pan', \n        hocPrice: '285.00', \n        ukPrice: '425.00', \n        leadTime: 2, \n        moq: 1, \n        supplier: 'Lusso Stone'\n      },\n      { \n        productCode: 'BSH001', \n        category: 'BATHROOMS', \n        subCategory: 'Family Bathroom', \n        type: 'Shower', \n        specs: 'Walk-in Shower Screen 1200mm', \n        hocPrice: '450.00', \n        ukPrice: '780.00', \n        leadTime: 3, \n        moq: 1, \n        supplier: 'Lusso Stone'\n      },\n      { \n        productCode: 'BBA003', \n        category: 'BATHROOMS', \n        subCategory: 'Master Ensuite', \n        type: 'Bath', \n        specs: 'Freestanding Stone Bath 1700mm', \n        hocPrice: '1850.00', \n        ukPrice: '2950.00', \n        leadTime: 4, \n        moq: 1, \n        supplier: 'Lusso Stone'\n      },\n      { \n        productCode: 'FWO001', \n        category: 'FLOORING', \n        subCategory: 'Living Areas', \n        type: 'Engineered Wood', \n        specs: 'Oak 15mm x 220mm', \n        hocPrice: '48.00', \n        ukPrice: '75.00', \n        unit: 'per m²', \n        leadTime: 2, \n        moq: 50, \n        supplier: 'Kährs'\n      },\n      { \n        productCode: 'FTI001', \n        category: 'FLOORING', \n        subCategory: 'Bathrooms', \n        type: 'Porcelain Tiles', \n        specs: 'Large Format 600x1200mm', \n        hocPrice: '38.00', \n        ukPrice: '62.00', \n        unit: 'per m²', \n        leadTime: 3, \n        moq: 30, \n        supplier: 'Porcelanosa'\n      },\n      { \n        productCode: 'LCH001', \n        category: 'LIGHTING & ELECTRICAL', \n        subCategory: 'Reception', \n        type: 'Chandelier', \n        specs: 'Crystal 800mm diameter', \n        hocPrice: '2800.00', \n        ukPrice: '4500.00', \n        leadTime: 6, \n        moq: 1, \n        supplier: 'Schonbek'\n      },\n      { \n        productCode: 'LSM001', \n        category: 'LIGHTING & ELECTRICAL', \n        subCategory: 'Whole House', \n        type: 'Smart Home System', \n        specs: 'Control4 Complete Package', \n        hocPrice: '8500.00', \n        ukPrice: '14000.00', \n        leadTime: 4, \n        moq: 1, \n        supplier: 'Control4'\n      },\n      { \n        productCode: 'LSP001', \n        category: 'LIGHTING & ELECTRICAL', \n        subCategory: 'General', \n        type: 'LED Spotlights', \n        specs: 'Adjustable GU10 Fire Rated', \n        hocPrice: '18.00', \n        ukPrice: '32.00', \n        leadTime: 1, \n        moq: 20, \n        supplier: 'JCC'\n      }\n    ];\n\n    initialProducts.forEach(product => {\n      const id = this.currentProductId++;\n      this.products.set(id, {\n        id,\n        ...product,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      } as Product);\n    });\n\n    // Initialize contractors\n    const initialContractors = [\n      {\n        name: 'The Market Design & Build',\n        type: 'Design & Build',\n        contact: 'James Mitchell',\n        email: 'james@marketdb.co.uk',\n        phone: '020 7123 4567',\n        address: 'Chelsea, London',\n        projectsActive: 3,\n        projectsCompleted: 12,\n        totalRevenue: '342000.00',\n        avgProjectValue: '1850000.00',\n        paymentTerms: 'Net 30',\n        discountTier: 'Gold',\n        status: 'active',\n        notes: 'RIBA chartered, focuses on £250k-£3M projects',\n        creditLimit: '500000.00',\n        outstandingBalance: '48500.00'\n      },\n      {\n        name: 'Prime London Developments',\n        type: 'Developer',\n        contact: 'Sarah Chen',\n        email: 'sarah@primeld.com',\n        phone: '020 7891 2345',\n        address: 'Mayfair, London',\n        projectsActive: 2,\n        projectsCompleted: 8,\n        totalRevenue: '218000.00',\n        avgProjectValue: '2400000.00',\n        paymentTerms: 'Net 45',\n        discountTier: 'Silver',\n        status: 'active',\n        creditLimit: '750000.00',\n        outstandingBalance: '0.00'\n      }\n    ];\n\n    initialContractors.forEach(contractor => {\n      const id = this.currentContractorId++;\n      this.contractors.set(id, {\n        id,\n        ...contractor,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      } as Contractor);\n    });\n\n    // Initialize suppliers\n    const initialSuppliers = [\n      { name: 'Lusso Stone', leadTime: 3, reliability: 95, paymentTerms: 'Net 60' },\n      { name: 'Häcker', leadTime: 6, reliability: 98, paymentTerms: 'Net 45' },\n      { name: 'Control4', leadTime: 4, reliability: 92, paymentTerms: 'Net 30' }\n    ];\n\n    initialSuppliers.forEach(supplier => {\n      const id = this.currentSupplierId++;\n      this.suppliers.set(id, {\n        id,\n        ...supplier,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      } as Supplier);\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = this.currentProductId++;\n    const newProduct: Product = {\n      id,\n      ...product,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Product = {\n      ...existing,\n      ...product,\n      updatedAt: new Date()\n    };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Contractors\n  async getContractors(): Promise<Contractor[]> {\n    return Array.from(this.contractors.values());\n  }\n\n  async getContractor(id: number): Promise<Contractor | undefined> {\n    return this.contractors.get(id);\n  }\n\n  async createContractor(contractor: InsertContractor): Promise<Contractor> {\n    const id = this.currentContractorId++;\n    const newContractor: Contractor = {\n      id,\n      ...contractor,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.contractors.set(id, newContractor);\n    return newContractor;\n  }\n\n  async updateContractor(id: number, contractor: Partial<InsertContractor>): Promise<Contractor | undefined> {\n    const existing = this.contractors.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Contractor = {\n      ...existing,\n      ...contractor,\n      updatedAt: new Date()\n    };\n    this.contractors.set(id, updated);\n    return updated;\n  }\n\n  async deleteContractor(id: number): Promise<boolean> {\n    return this.contractors.delete(id);\n  }\n\n  // Quotes\n  async getQuotes(): Promise<Quote[]> {\n    return Array.from(this.quotes.values());\n  }\n\n  async getQuote(id: number): Promise<Quote | undefined> {\n    return this.quotes.get(id);\n  }\n\n  async createQuote(quote: InsertQuote): Promise<Quote> {\n    const id = this.currentQuoteId++;\n    const newQuote: Quote = {\n      id,\n      ...quote,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.quotes.set(id, newQuote);\n    return newQuote;\n  }\n\n  async updateQuote(id: number, quote: Partial<InsertQuote>): Promise<Quote | undefined> {\n    const existing = this.quotes.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Quote = {\n      ...existing,\n      ...quote,\n      updatedAt: new Date()\n    };\n    this.quotes.set(id, updated);\n    return updated;\n  }\n\n  async deleteQuote(id: number): Promise<boolean> {\n    return this.quotes.delete(id);\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const id = this.currentOrderId++;\n    const newOrder: Order = {\n      id,\n      ...order,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.orders.set(id, newOrder);\n    return newOrder;\n  }\n\n  async updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order | undefined> {\n    const existing = this.orders.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Order = {\n      ...existing,\n      ...order,\n      updatedAt: new Date()\n    };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async deleteOrder(id: number): Promise<boolean> {\n    return this.orders.delete(id);\n  }\n\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return Array.from(this.suppliers.values());\n  }\n\n  async getSupplier(id: number): Promise<Supplier | undefined> {\n    return this.suppliers.get(id);\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const id = this.currentSupplierId++;\n    const newSupplier: Supplier = {\n      id,\n      ...supplier,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.suppliers.set(id, newSupplier);\n    return newSupplier;\n  }\n\n  async updateSupplier(id: number, supplier: Partial<InsertSupplier>): Promise<Supplier | undefined> {\n    const existing = this.suppliers.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Supplier = {\n      ...existing,\n      ...supplier,\n      updatedAt: new Date()\n    };\n    this.suppliers.set(id, updated);\n    return updated;\n  }\n\n  async deleteSupplier(id: number): Promise<boolean> {\n    return this.suppliers.delete(id);\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [updated] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return result.rowCount > 0;\n  }\n\n  async clearAllProducts(): Promise<void> {\n    await db.delete(products);\n  }\n\n  // Contractors\n  async getContractors(): Promise<Contractor[]> {\n    return await db.select().from(contractors);\n  }\n\n  async getContractor(id: number): Promise<Contractor | undefined> {\n    const [contractor] = await db.select().from(contractors).where(eq(contractors.id, id));\n    return contractor;\n  }\n\n  async createContractor(contractor: InsertContractor): Promise<Contractor> {\n    const [newContractor] = await db.insert(contractors).values(contractor).returning();\n    return newContractor;\n  }\n\n  async updateContractor(id: number, contractor: Partial<InsertContractor>): Promise<Contractor | undefined> {\n    const [updated] = await db\n      .update(contractors)\n      .set({ ...contractor, updatedAt: new Date() })\n      .where(eq(contractors.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteContractor(id: number): Promise<boolean> {\n    const result = await db.delete(contractors).where(eq(contractors.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Quotes\n  async getQuotes(): Promise<Quote[]> {\n    return await db.select().from(quotes);\n  }\n\n  async getQuote(id: number): Promise<Quote | undefined> {\n    const [quote] = await db.select().from(quotes).where(eq(quotes.id, id));\n    return quote;\n  }\n\n  async createQuote(quote: InsertQuote): Promise<Quote> {\n    const [newQuote] = await db.insert(quotes).values(quote).returning();\n    return newQuote;\n  }\n\n  async updateQuote(id: number, quote: Partial<InsertQuote>): Promise<Quote | undefined> {\n    const [updated] = await db\n      .update(quotes)\n      .set({ ...quote, updatedAt: new Date() })\n      .where(eq(quotes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteQuote(id: number): Promise<boolean> {\n    const result = await db.delete(quotes).where(eq(quotes.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return await db.select().from(orders);\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order | undefined> {\n    const [updated] = await db\n      .update(orders)\n      .set({ ...order, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteOrder(id: number): Promise<boolean> {\n    const result = await db.delete(orders).where(eq(orders.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return await db.select().from(suppliers);\n  }\n\n  async getSupplier(id: number): Promise<Supplier | undefined> {\n    const [supplier] = await db.select().from(suppliers).where(eq(suppliers.id, id));\n    return supplier;\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const [newSupplier] = await db.insert(suppliers).values(supplier).returning();\n    return newSupplier;\n  }\n\n  async updateSupplier(id: number, supplier: Partial<InsertSupplier>): Promise<Supplier | undefined> {\n    const [updated] = await db\n      .update(suppliers)\n      .set({ ...supplier, updatedAt: new Date() })\n      .where(eq(suppliers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSupplier(id: number): Promise<boolean> {\n    const result = await db.delete(suppliers).where(eq(suppliers.id, id));\n    return result.rowCount > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18862},"server/upload-service.ts":{"content":"import multer from 'multer';\nimport XLSX from 'xlsx';\nimport sharp from 'sharp';\nimport yauzl from 'yauzl';\nimport { storage } from './storage';\nimport fs from 'fs';\nimport path from 'path';\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = 'uploads';\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n    }\n  }),\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      '.xlsx', '.xls'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype) || \n        allowedTypes.some(type => file.originalname.toLowerCase().endsWith(type))) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only Excel files are allowed'), false);\n    }\n  }\n});\n\ninterface ParsedProduct {\n  type: string;\n  productCode: string;\n  category: string;\n  subCategory: string;\n  specs: string;\n  hocPrice: string;\n  ukPrice: string;\n  link: string | null;\n  unit: string | null;\n  leadTime: number;\n  moq: number;\n  supplier: string;\n  imageUrl?: string;\n}\n\n// Create images directory if it doesn't exist\nconst ensureImagesDirectory = () => {\n  const imagesDir = path.join(process.cwd(), 'public', 'images', 'products');\n  if (!fs.existsSync(imagesDir)) {\n    fs.mkdirSync(imagesDir, { recursive: true });\n  }\n  return imagesDir;\n};\n\n// Extract images from Excel file and create row-to-image mapping\nconst extractImagesFromExcel = async (filePath: string): Promise<Record<number, string>> => {\n  const rowImageMap: Record<number, string> = {};\n  \n  try {\n    // Create directory for extracted images\n    const imagesDir = path.join('uploads', 'extracted-images');\n    if (!fs.existsSync(imagesDir)) {\n      fs.mkdirSync(imagesDir, { recursive: true });\n    }\n\n    // First, extract all images from the Excel archive\n    const imageFiles: Record<string, string> = {};\n    \n    await new Promise<void>((resolve, reject) => {\n      yauzl.open(filePath, { lazyEntries: true }, (err, zipfile) => {\n        if (err) {\n          console.error('Error opening Excel file as ZIP:', err);\n          resolve();\n          return;\n        }\n\n        if (!zipfile) {\n          resolve();\n          return;\n        }\n\n        zipfile.readEntry();\n        \n        zipfile.on('entry', (entry) => {\n          // Look for image files in the media folder\n          if (entry.fileName.startsWith('xl/media/') && \n              (entry.fileName.endsWith('.png') || \n               entry.fileName.endsWith('.jpg') || \n               entry.fileName.endsWith('.jpeg') ||\n               entry.fileName.endsWith('.gif') ||\n               entry.fileName.endsWith('.tmp'))) {\n            \n            zipfile.openReadStream(entry, (err, readStream) => {\n              if (err) {\n                console.error('Error reading image entry:', err);\n                zipfile.readEntry();\n                return;\n              }\n\n              if (!readStream) {\n                zipfile.readEntry();\n                return;\n              }\n\n              // Handle .tmp files by giving them proper extensions\n              const originalName = path.basename(entry.fileName);\n              const imageFileName = originalName.endsWith('.tmp') \n                ? `extracted-${Date.now()}-${originalName.replace('.tmp', '.png')}`\n                : `extracted-${Date.now()}-${originalName}`;\n              const imagePath = path.join(imagesDir, imageFileName);\n              const writeStream = fs.createWriteStream(imagePath);\n              \n              readStream.pipe(writeStream);\n              \n              writeStream.on('close', () => {\n                // Store the relative path for serving\n                const relativePath = `/uploads/extracted-images/${imageFileName}`;\n                imageFiles[entry.fileName] = relativePath;\n                console.log(`Extracted image: ${entry.fileName} -> ${relativePath}`);\n                zipfile.readEntry();\n              });\n\n              writeStream.on('error', (err) => {\n                console.error('Error writing image file:', err);\n                zipfile.readEntry();\n              });\n            });\n          } else {\n            zipfile.readEntry();\n          }\n        });\n\n        zipfile.on('end', () => {\n          console.log(`Extracted ${Object.keys(imageFiles).length} images from Excel file`);\n          resolve();\n        });\n\n        zipfile.on('error', (err) => {\n          console.error('Error processing ZIP file:', err);\n          resolve();\n        });\n      });\n    });\n\n    // Map images to products based on Excel structure\n    const imageUrls = Object.keys(imageFiles)\n      .sort() // Sort by filename to maintain Excel order\n      .map(key => imageFiles[key]);\n    \n    if (imageUrls.length > 0) {\n      console.log(`Processing ${imageUrls.length} images for mapping`);\n      \n      // Read the Excel file to understand product layout\n      const data = fs.readFileSync(filePath);\n      const workbook = XLSX.read(data, { type: 'buffer' });\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      // Find all rows with product specs (column D/index 3)\n      const productRows: number[] = [];\n      \n      for (let i = 0; i < jsonData.length; i++) {\n        const row = jsonData[i] as any[];\n        const specs = row[3]; // Column D - Product Specs\n        \n        // A product row has meaningful specs\n        if (specs && String(specs).trim().length > 10) {\n          productRows.push(i);\n          console.log(`Found product at row ${i}: ${String(specs).substring(0, 40)}...`);\n        }\n      }\n      \n      console.log(`Found ${productRows.length} product rows and ${imageUrls.length} images`);\n      \n      // Map images to product rows in order\n      const maxMappings = Math.min(productRows.length, imageUrls.length);\n      for (let i = 0; i < maxMappings; i++) {\n        const rowIndex = productRows[i];\n        const imageUrl = imageUrls[i];\n        rowImageMap[rowIndex] = imageUrl;\n        \n        const row = jsonData[rowIndex] as any[];\n        const specs = String(row[3]).substring(0, 40);\n        console.log(`Mapped image ${i + 1} to row ${rowIndex}: ${specs}...`);\n      }\n      \n      console.log(`Created ${Object.keys(rowImageMap).length} image mappings`);\n    }\n    \n    return rowImageMap;\n  } catch (error) {\n    console.error('Error extracting images from Excel:', error);\n    return rowImageMap;\n  }\n};\n\n// Helper function to find column index by header names\nconst findColumnIndex = (headers: string[], searchTerms: string[]): number => {\n  for (let i = 0; i < headers.length; i++) {\n    const header = headers[i];\n    if (!header) continue;\n    \n    const lowerHeader = header.toLowerCase().trim();\n    for (const term of searchTerms) {\n      if (lowerHeader.includes(term.toLowerCase())) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n// Helper function to get cell value safely\nconst getCellValue = (row: any[], columnIndex: number): string => {\n  if (columnIndex === -1 || !row || columnIndex >= row.length) {\n    return '';\n  }\n  const value = row[columnIndex];\n  return value ? String(value).trim() : '';\n};\n\n// Helper function to clean price values\nconst cleanPriceValue = (price: string | number): string => {\n  if (!price && price !== 0) return '0.00';\n  \n  // Handle numeric values\n  if (typeof price === 'number') {\n    return price.toFixed(2);\n  }\n  \n  // Handle string values\n  const strPrice = String(price).trim();\n  if (!strPrice) return '0.00';\n  \n  // Remove currency symbols and normalize\n  const cleaned = strPrice.replace(/[£$€,]/g, '').trim();\n  const numValue = parseFloat(cleaned);\n  \n  return isNaN(numValue) ? '0.00' : numValue.toFixed(2);\n};\n\n// Helper function to get image for a specific row\nconst getImageForRow = (rowImageMap: Record<number, string>, rowIndex: number): string | null => {\n  return rowImageMap[rowIndex] || null;\n};\n\n// Parse Excel file and extract product data\nexport const parseExcelFile = async (filePath: string): Promise<ParsedProduct[]> => {\n  const products: ParsedProduct[] = [];\n  \n  try {\n    const data = fs.readFileSync(filePath);\n    const workbook = XLSX.read(data, { type: 'buffer' });\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n    \n    // Extract images with row mapping\n    const rowImageMap = await extractImagesFromExcel(filePath);\n    \n    // Find header row (looking for key columns)\n    let headerRowIndex = -1;\n    for (let i = 0; i < jsonData.length; i++) {\n      const row = jsonData[i] as any[];\n      if (row.some(cell => \n        typeof cell === 'string' && \n        (cell.toLowerCase().includes('product') || \n         cell.toLowerCase().includes('category') || \n         cell.toLowerCase().includes('price'))\n      )) {\n        headerRowIndex = i;\n        break;\n      }\n    }\n    \n    if (headerRowIndex === -1) {\n      throw new Error('Could not find header row in Excel file');\n    }\n    \n    const headers = jsonData[headerRowIndex] as string[];\n    \n    // Map column indices based on your spreadsheet structure\n    const columnMap = {\n      type: findColumnIndex(headers, ['type', 'item type']),\n      productCode: findColumnIndex(headers, ['s.no', 'product code', 'code', 'item code']),\n      category: findColumnIndex(headers, ['product category', 'category']),\n      subCategory: findColumnIndex(headers, ['title / location', 'title/location', 'sub category', 'subcategory']),\n      specs: findColumnIndex(headers, ['product specs', 'specs', 'specification']),\n      hocPrice: 5, // Fixed: HOC Price is always column 5\n      ukPrice: 6,  // Fixed: UK Price is always column 6\n      link: findColumnIndex(headers, ['uk - product link', 'uk product link', 'link', 'url']),\n      supplier: findColumnIndex(headers, ['supplier', 'manufacturer'])\n    };\n    \n    console.log('Column mapping found:', {\n      type: columnMap.type,\n      productCode: columnMap.productCode,\n      category: columnMap.category,\n      subCategory: columnMap.subCategory,\n      specs: columnMap.specs,\n      hocPrice: columnMap.hocPrice,\n      ukPrice: columnMap.ukPrice,\n      link: columnMap.link,\n      supplier: columnMap.supplier\n    });\n    \n    console.log('Headers found:', headers);\n    \n    console.log(`Successfully mapped price columns: HOC=${columnMap.hocPrice}, UK=${columnMap.ukPrice}`);\n    \n    // Process data rows\n    let currentCategory = 'General';\n    \n    for (let i = headerRowIndex + 1; i < jsonData.length; i++) {\n      const row = jsonData[i] as any[];\n      \n      // Skip empty rows\n      if (!row || row.every(cell => !cell || cell === '')) {\n        continue;\n      }\n      \n      // Check if this is a section header row (like \"A\", \"KITCHEN\")\n      const firstCell = getCellValue(row, 0);\n      const secondCell = getCellValue(row, 1);\n      \n      // If first cell is a letter and second cell is a category name, update current category\n      if (firstCell.length === 1 && firstCell.match(/[A-Z]/) && secondCell && !getCellValue(row, 2)) {\n        currentCategory = secondCell;\n        continue;\n      }\n      \n      // Skip section header rows that don't have product data\n      if (!getCellValue(row, columnMap.productCode) && !getCellValue(row, columnMap.specs)) {\n        continue;\n      }\n      \n      const productCode = getCellValue(row, columnMap.productCode) || `AUTO-${i}-${Math.random().toString(36).substr(2, 4)}`;\n      const imageUrl = getImageForRow(rowImageMap, i);\n      console.log(`Product ${productCode} (row ${i}) assigned image: ${imageUrl}`);\n      \n      const product: ParsedProduct = {\n        type: getCellValue(row, columnMap.type) || 'Product',\n        productCode: productCode,\n        category: getCellValue(row, columnMap.category) || currentCategory,\n        subCategory: getCellValue(row, columnMap.subCategory) || '',\n        specs: getCellValue(row, columnMap.specs) || '',\n        hocPrice: String(row[5] || '0'), // Direct column 5 access\n        ukPrice: String(row[6] || '0'),  // Direct column 6 access\n        link: getCellValue(row, columnMap.link) || null,\n        unit: 'unit', // Default unit\n        leadTime: 7, // Default lead time\n        moq: 1, // Default minimum order quantity\n        supplier: getCellValue(row, columnMap.supplier) || 'Unknown',\n        imageUrl: imageUrl\n      };\n      \n      // Clean up price values\n      product.hocPrice = cleanPriceValue(product.hocPrice);\n      product.ukPrice = cleanPriceValue(product.ukPrice);\n      \n      // Only add products with meaningful data\n      if (product.specs || product.hocPrice !== '0' || product.ukPrice !== '0') {\n        products.push(product);\n      }\n    }\n    \n    console.log(`Parsed ${products.length} products from Excel file`);\n    return products;\n    \n  } catch (error) {\n    console.error('Error parsing Excel file:', error);\n    throw new Error(`Failed to parse Excel file: ${error.message}`);\n  }\n};\n\n\n\n// Import products into storage\nexport const importProductsFromExcel = async (filePath: string): Promise<{ success: number, errors: string[] }> => {\n  const results = { success: 0, errors: [] };\n  \n  try {\n    const products = await parseExcelFile(filePath);\n    \n    // Clear existing products before importing new ones\n    try {\n      await storage.clearAllProducts();\n      console.log('Cleared existing products before import');\n    } catch (error) {\n      console.log('No existing products to clear or clearAllProducts not implemented');\n    }\n    \n    // Track used product codes to ensure uniqueness\n    const usedProductCodes = new Set<string>();\n    \n    for (const productData of products) {\n      try {\n        // Ensure unique product code\n        let uniqueProductCode = productData.productCode;\n        let counter = 1;\n        while (usedProductCodes.has(uniqueProductCode)) {\n          uniqueProductCode = `${productData.productCode}-${counter}`;\n          counter++;\n        }\n        usedProductCodes.add(uniqueProductCode);\n        \n        await storage.createProduct({\n          type: productData.type,\n          productCode: uniqueProductCode,\n          category: productData.category,\n          subCategory: productData.subCategory || null,\n          specs: productData.specs,\n          hocPrice: productData.hocPrice,\n          ukPrice: productData.ukPrice,\n          link: productData.link,\n          unit: productData.unit || null,\n          leadTime: productData.leadTime,\n          moq: productData.moq,\n          supplier: productData.supplier,\n          imageUrl: productData.imageUrl\n        });\n        \n        results.success++;\n      } catch (error) {\n        console.error(`Failed to import product ${productData.productCode}:`, error);\n        results.errors.push(`Failed to import product ${productData.productCode}: ${error.message}`);\n      }\n    }\n    \n    // Clean up uploaded file\n    fs.unlinkSync(filePath);\n    \n    return results;\n  } catch (error) {\n    results.errors.push(`Failed to process Excel file: ${error.message}`);\n    return results;\n  }\n};\n\nexport const uploadMiddleware = upload.single('excelFile');","size_bytes":15620},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, decimal, timestamp, varchar, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  productCode: varchar(\"product_code\", { length: 50 }).notNull().unique(),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  subCategory: varchar(\"sub_category\", { length: 100 }),\n  type: varchar(\"type\", { length: 100 }).notNull(),\n  specs: text(\"specs\").notNull(),\n  hocPrice: decimal(\"hoc_price\", { precision: 10, scale: 2 }).notNull(),\n  ukPrice: decimal(\"uk_price\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\", { length: 20 }),\n  leadTime: integer(\"lead_time\").notNull(),\n  moq: integer(\"moq\").notNull(),\n  supplier: varchar(\"supplier\", { length: 100 }).notNull(),\n  link: text(\"link\"),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contractors = pgTable(\"contractors\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  contact: varchar(\"contact\", { length: 100 }),\n  email: varchar(\"email\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  projectsActive: integer(\"projects_active\").default(0),\n  projectsCompleted: integer(\"projects_completed\").default(0),\n  totalRevenue: decimal(\"total_revenue\", { precision: 12, scale: 2 }).default(\"0\"),\n  avgProjectValue: decimal(\"avg_project_value\", { precision: 12, scale: 2 }).default(\"0\"),\n  paymentTerms: varchar(\"payment_terms\", { length: 50 }),\n  discountTier: varchar(\"discount_tier\", { length: 20 }),\n  status: varchar(\"status\", { length: 20 }).default(\"active\"),\n  notes: text(\"notes\"),\n  creditLimit: decimal(\"credit_limit\", { precision: 12, scale: 2 }).default(\"0\"),\n  outstandingBalance: decimal(\"outstanding_balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const quotes = pgTable(\"quotes\", {\n  id: serial(\"id\").primaryKey(),\n  quoteNumber: varchar(\"quote_number\", { length: 50 }).notNull().unique(),\n  projectName: varchar(\"project_name\", { length: 200 }).notNull(),\n  contractorId: integer(\"contractor_id\").references(() => contractors.id),\n  createdDate: timestamp(\"created_date\").defaultNow(),\n  expiryDate: timestamp(\"expiry_date\"),\n  status: varchar(\"status\", { length: 20 }).default(\"draft\"),\n  items: jsonb(\"items\").notNull(),\n  notes: text(\"notes\"),\n  discount: decimal(\"discount\", { precision: 5, scale: 2 }).default(\"0\"),\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  accepted: boolean(\"accepted\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  orderNumber: varchar(\"order_number\", { length: 50 }).notNull().unique(),\n  quoteId: integer(\"quote_id\").references(() => quotes.id),\n  contractorId: integer(\"contractor_id\").references(() => contractors.id),\n  projectName: varchar(\"project_name\", { length: 200 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"),\n  items: jsonb(\"items\").notNull(),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  deliveryDate: timestamp(\"delivery_date\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const suppliers = pgTable(\"suppliers\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  leadTime: integer(\"lead_time\").notNull(),\n  reliability: integer(\"reliability\").notNull(),\n  paymentTerms: varchar(\"payment_terms\", { length: 50 }),\n  contact: varchar(\"contact\", { length: 100 }),\n  email: varchar(\"email\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContractorSchema = createInsertSchema(contractors).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQuoteSchema = createInsertSchema(quotes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Contractor = typeof contractors.$inferSelect;\nexport type InsertContractor = z.infer<typeof insertContractorSchema>;\n\nexport type Quote = typeof quotes.$inferSelect;\nexport type InsertQuote = z.infer<typeof insertQuoteSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\n","size_bytes":5554},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":714},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(220, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(222, 84%, 4.9%);\n  --radius: 0.5rem;\n  \n  /* Custom colors for business theme */\n  --neutral-50: hsl(0, 0%, 98%);\n  --neutral-100: hsl(0, 0%, 95%);\n  --neutral-200: hsl(0, 0%, 90%);\n  --neutral-300: hsl(0, 0%, 83%);\n  --neutral-400: hsl(0, 0%, 64%);\n  --neutral-500: hsl(0, 0%, 45%);\n  --neutral-600: hsl(0, 0%, 32%);\n  --neutral-700: hsl(0, 0%, 26%);\n  --neutral-800: hsl(0, 0%, 15%);\n  --neutral-900: hsl(0, 0%, 9%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(220, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(212, 27%, 84%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom utility classes */\n.text-neutral-50 { color: var(--neutral-50); }\n.text-neutral-100 { color: var(--neutral-100); }\n.text-neutral-200 { color: var(--neutral-200); }\n.text-neutral-300 { color: var(--neutral-300); }\n.text-neutral-400 { color: var(--neutral-400); }\n.text-neutral-500 { color: var(--neutral-500); }\n.text-neutral-600 { color: var(--neutral-600); }\n.text-neutral-700 { color: var(--neutral-700); }\n.text-neutral-800 { color: var(--neutral-800); }\n.text-neutral-900 { color: var(--neutral-900); }\n\n.bg-neutral-50 { background-color: var(--neutral-50); }\n.bg-neutral-100 { background-color: var(--neutral-100); }\n.bg-neutral-200 { background-color: var(--neutral-200); }\n.bg-neutral-300 { background-color: var(--neutral-300); }\n.bg-neutral-400 { background-color: var(--neutral-400); }\n.bg-neutral-500 { background-color: var(--neutral-500); }\n.bg-neutral-600 { background-color: var(--neutral-600); }\n.bg-neutral-700 { background-color: var(--neutral-700); }\n.bg-neutral-800 { background-color: var(--neutral-800); }\n.bg-neutral-900 { background-color: var(--neutral-900); }\n\n.border-neutral-50 { border-color: var(--neutral-50); }\n.border-neutral-100 { border-color: var(--neutral-100); }\n.border-neutral-200 { border-color: var(--neutral-200); }\n.border-neutral-300 { border-color: var(--neutral-300); }\n.border-neutral-400 { border-color: var(--neutral-400); }\n.border-neutral-500 { border-color: var(--neutral-500); }\n.border-neutral-600 { border-color: var(--neutral-600); }\n.border-neutral-700 { border-color: var(--neutral-700); }\n.border-neutral-800 { border-color: var(--neutral-800); }\n.border-neutral-900 { border-color: var(--neutral-900); }\n","size_bytes":3699},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { MessageCircle, Send, X, Loader2, Bot, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: \"user\" | \"ai\";\n  timestamp: Date;\n}\n\ninterface AIChatProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AIChat({ isOpen, onClose }: AIChatProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"welcome\",\n      text: \"Hello! I'm your AI assistant for House of Clarence Business OS. You can ask me questions like:\\n\\n• 'Show me all products from a specific supplier'\\n• 'What's our profit margin on WC products?'\\n• 'Which contractors have the highest project value?'\\n• 'What are our best selling product categories?'\\n• 'Find products with lead times under 2 weeks'\\n\\nWhat would you like to know about your business?\",\n      sender: \"ai\",\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai-chat\", { message });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const aiMessage: Message = {\n        id: `ai-${Date.now()}`,\n        text: data.response,\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    },\n    onError: () => {\n      const errorMessage: Message = {\n        id: `error-${Date.now()}`,\n        text: \"I'm sorry, I encountered an error. Please try again.\",\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: `user-${Date.now()}`,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl w-full max-w-2xl h-[600px] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold\">AI Property Assistant</h2>\n              <p className=\"text-sm text-neutral-500\">Ask me about property data</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Messages */}\n        <ScrollArea className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start gap-3 ${\n                  message.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.sender === \"ai\" && (\n                  <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-4 h-4 text-white\" />\n                  </div>\n                )}\n                <div\n                  className={`max-w-[80%] rounded-lg p-3 ${\n                    message.sender === \"user\"\n                      ? \"bg-blue-500 text-white\"\n                      : \"bg-neutral-100 text-neutral-900\"\n                  }`}\n                >\n                  <p className=\"text-sm whitespace-pre-wrap\">{message.text}</p>\n                  <p className=\"text-xs opacity-70 mt-1\">\n                    {message.timestamp.toLocaleTimeString()}\n                  </p>\n                </div>\n                {message.sender === \"user\" && (\n                  <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <User className=\"w-4 h-4 text-white\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {chatMutation.isPending && (\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                  <Bot className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"bg-neutral-100 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-sm text-neutral-600\">Thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Input */}\n        <div className=\"p-4 border-t\">\n          <div className=\"flex gap-2\">\n            <Input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask me about property data...\"\n              disabled={chatMutation.isPending}\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={chatMutation.isPending || !inputMessage.trim()}\n              size=\"icon\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <p className=\"text-xs text-neutral-500 mt-2\">\n            Try asking: \"Show me properties in Westminster\" or \"What's the market analysis for London?\"\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6803},"client/src/components/analytics.tsx":{"content":"import { BarChart3, TrendingUp, PieChart, Calendar } from \"lucide-react\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\n\nexport default function Analytics() {\n  const { products, contractors, quotes, orders } = useBusinessData();\n\n  // Calculate analytics\n  const totalProducts = products.data?.length || 0;\n  const totalContractors = contractors.data?.length || 0;\n  const totalQuotes = quotes.data?.length || 0;\n  const totalOrders = orders.data?.length || 0;\n\n  const avgMargin = products.data?.reduce((sum, p) => {\n    const margin = ((parseFloat(p.ukPrice) - parseFloat(p.hocPrice)) / parseFloat(p.ukPrice)) * 100;\n    return sum + margin;\n  }, 0) / totalProducts || 0;\n\n  const totalRevenue = contractors.data?.reduce((sum, c) => sum + parseFloat(c.totalRevenue || \"0\"), 0) || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-800\">Analytics & Insights</h2>\n          <p className=\"text-sm text-neutral-500 mt-1\">Business performance and data insights</p>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-green-600\">+12%</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">£{(totalRevenue / 1000).toFixed(0)}k</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Total Revenue</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <TrendingUp className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-neutral-600\">{avgMargin.toFixed(1)}%</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{totalProducts}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Active Products</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\n              <PieChart className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-neutral-600\">85% rate</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{totalQuotes}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Quotes Generated</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-orange-50 rounded-lg\">\n              <Calendar className=\"w-6 h-6 text-orange-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-neutral-600\">+8%</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{totalOrders}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Orders Processed</p>\n        </div>\n      </div>\n\n      {/* Analytics Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4\">Revenue Trends</h3>\n          <div className=\"h-64 bg-neutral-50 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"w-12 h-12 text-neutral-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-neutral-500\">Revenue chart visualization</p>\n              <p className=\"text-xs text-neutral-400\">Monthly and quarterly trends</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Category Performance */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4\">Category Performance</h3>\n          <div className=\"h-64 bg-neutral-50 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <PieChart className=\"w-12 h-12 text-neutral-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-neutral-500\">Category breakdown</p>\n              <p className=\"text-xs text-neutral-400\">Sales by product category</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <h3 className=\"text-lg font-semibold mb-4\">Performance Metrics</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold text-blue-600\">{avgMargin.toFixed(1)}%</p>\n            <p className=\"text-sm text-neutral-600\">Average Margin</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold text-green-600\">{totalContractors}</p>\n            <p className=\"text-sm text-neutral-600\">Active Contractors</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-3xl font-bold text-purple-600\">\n              {totalQuotes > 0 ? (100).toFixed(0) : 0}%\n            </p>\n            <p className=\"text-sm text-neutral-600\">Quote Acceptance Rate</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5952},"client/src/components/catalogue.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Package, Upload, ExternalLink } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function Catalogue() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = !searchTerm || \n      product.productCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.specs.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.category.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = Array.from(new Set(products.map(p => p.category)));\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    \n    const formData = new FormData();\n    formData.append('excelFile', file);\n\n    try {\n      const response = await fetch('/api/upload-excel', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Upload successful\",\n          description: `Imported ${result.results.imported} products successfully`,\n        });\n        setUploadDialogOpen(false);\n        // Refresh products data\n        window.location.reload();\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"There was an error uploading the Excel file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Product Catalogue</h1>\n          <p className=\"text-gray-600\">Browse and manage your product inventory</p>\n        </div>\n        \n        <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload Excel\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload Excel File</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"excel-file\">Select Excel file with products</Label>\n                <Input\n                  id=\"excel-file\"\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleFileUpload}\n                  disabled={isUploading}\n                />\n              </div>\n              {isUploading && (\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-600\">Uploading and processing...</p>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search products...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        <div className=\"flex gap-2 flex-wrap\">\n          <Button\n            variant={selectedCategory === \"\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedCategory(\"\")}\n            size=\"sm\"\n          >\n            All Categories\n          </Button>\n          {categories.map(category => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(category)}\n              size=\"sm\"\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Total Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{products.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Categories</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{categories.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">With Images</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {products.filter(p => p.imageUrl).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {filteredProducts.map(product => (\n          <Card key={product.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n            {/* Product Image */}\n            <div className=\"aspect-square bg-gray-50 flex items-center justify-center\">\n              {product.imageUrl ? (\n                <img\n                  src={product.imageUrl}\n                  alt={product.specs}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    e.currentTarget.src = '';\n                    e.currentTarget.style.display = 'none';\n                    e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                  }}\n                />\n              ) : null}\n              <div className={`flex items-center justify-center ${product.imageUrl ? 'hidden' : ''}`}>\n                <Package className=\"h-12 w-12 text-gray-400\" />\n              </div>\n            </div>\n\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {product.productCode}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {product.category}\n                </Badge>\n              </div>\n              <CardTitle className=\"text-lg line-clamp-2\">{product.specs}</CardTitle>\n              {product.subCategory && (\n                <CardDescription className=\"text-sm\">\n                  {product.subCategory}\n                </CardDescription>\n              )}\n            </CardHeader>\n\n            <CardContent className=\"pt-0\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">HOC Price:</span>\n                  <span className=\"font-semibold\">£{product.hocPrice}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">UK Price:</span>\n                  <span className=\"font-semibold\">£{product.ukPrice}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Supplier:</span>\n                  <span className=\"text-sm\">{product.supplier}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Lead Time:</span>\n                  <span className=\"text-sm\">{product.leadTime} days</span>\n                </div>\n              </div>\n              \n              {product.link && (\n                <div className=\"mt-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full\"\n                    onClick={() => product.link && window.open(product.link, '_blank')}\n                  >\n                    <ExternalLink className=\"h-4 w-4 mr-2\" />\n                    View Product\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredProducts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No products found</h3>\n          <p className=\"text-gray-600\">\n            {searchTerm || selectedCategory \n              ? \"Try adjusting your search or filters\"\n              : \"Upload an Excel file to get started\"\n            }\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10295},"client/src/components/contractor-management.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Plus, Edit, Trash2, Users, Mail, Phone, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\n\nexport default function ContractorManagement() {\n  const { contractors } = useBusinessData();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredContractors = contractors.data?.filter(contractor =>\n    contractor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contractor.type.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contractor.contact?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral-800\">Contractor Management</h2>\n            <p className=\"text-sm text-neutral-500 mt-1\">Manage your contractor relationships and projects</p>\n          </div>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Contractor\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search contractors...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Contractor Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {filteredContractors.map(contractor => {\n          const creditUtilization = parseFloat(contractor.outstandingBalance || \"0\") / parseFloat(contractor.creditLimit || \"1\") * 100;\n          const isHighRisk = creditUtilization > 80;\n          \n          return (\n            <div key={contractor.id} className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">\n                      {contractor.name.split(' ').map(n => n[0]).join('').substring(0, 2)}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{contractor.name}</h3>\n                    <p className=\"text-sm text-neutral-500\">{contractor.type}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={contractor.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {contractor.status}\n                  </Badge>\n                  <Badge variant={contractor.discountTier === \"Gold\" ? \"default\" : \"secondary\"}>\n                    {contractor.discountTier}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Contact Information */}\n              <div className=\"space-y-2 mb-4\">\n                {contractor.contact && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Users className=\"w-4 h-4 text-neutral-400\" />\n                    <span>{contractor.contact}</span>\n                  </div>\n                )}\n                {contractor.email && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Mail className=\"w-4 h-4 text-neutral-400\" />\n                    <span>{contractor.email}</span>\n                  </div>\n                )}\n                {contractor.phone && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Phone className=\"w-4 h-4 text-neutral-400\" />\n                    <span>{contractor.phone}</span>\n                  </div>\n                )}\n                {contractor.address && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <MapPin className=\"w-4 h-4 text-neutral-400\" />\n                    <span>{contractor.address}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-neutral-900\">{contractor.projectsActive}</p>\n                  <p className=\"text-xs text-neutral-500\">Active Projects</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-neutral-900\">{contractor.projectsCompleted}</p>\n                  <p className=\"text-xs text-neutral-500\">Completed</p>\n                </div>\n              </div>\n\n              {/* Financial Info */}\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-neutral-600\">Total Revenue:</span>\n                  <span className=\"font-semibold\">£{parseFloat(contractor.totalRevenue || \"0\").toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-neutral-600\">Outstanding:</span>\n                  <span className={`font-semibold ${isHighRisk ? 'text-red-600' : 'text-neutral-900'}`}>\n                    £{parseFloat(contractor.outstandingBalance || \"0\").toLocaleString()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-neutral-600\">Credit Available:</span>\n                  <span className=\"font-semibold text-green-600\">\n                    £{(parseFloat(contractor.creditLimit || \"0\") - parseFloat(contractor.outstandingBalance || \"0\")).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n\n              {/* Payment Terms */}\n              <div className=\"mb-4\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {contractor.paymentTerms}\n                </Badge>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                  View Projects\n                </Button>\n              </div>\n\n              {/* Risk Warning */}\n              {isHighRisk && (\n                <div className=\"mt-3 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700\">\n                  High credit utilization ({creditUtilization.toFixed(0)}%)\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {filteredContractors.length === 0 && (\n        <div className=\"text-center py-12 bg-white rounded-xl shadow-sm border border-neutral-200\">\n          <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <p className=\"text-gray-600\">No contractors found</p>\n          <p className=\"text-sm text-gray-500 mt-2\">Try adjusting your search or add a new contractor</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7750},"client/src/components/excel-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Upload, FileSpreadsheet, X, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExcelUploadProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface UploadResult {\n  imported: number;\n  errors: string[];\n}\n\nexport default function ExcelUpload({ isOpen, onClose }: ExcelUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('excelFile', file);\n      \n      const response = await fetch('/api/upload-excel', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUploadResult(data.results);\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      \n      toast({\n        title: \"Upload Complete\",\n        description: `Successfully imported ${data.results.imported} products`,\n        variant: \"default\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFile(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleFile = (file: File) => {\n    const allowedTypes = [\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ];\n    \n    const isExcel = allowedTypes.includes(file.type) || \n                   file.name.toLowerCase().endsWith('.xlsx') || \n                   file.name.toLowerCase().endsWith('.xls');\n    \n    if (!isExcel) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please upload an Excel file (.xlsx or .xls)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (file.size > 50 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please upload a file smaller than 50MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedFile(file);\n    setUploadResult(null);\n  };\n\n  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      handleFile(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      uploadMutation.mutate(selectedFile);\n    }\n  };\n\n  const resetUpload = () => {\n    setSelectedFile(null);\n    setUploadResult(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileSpreadsheet className=\"w-5 h-5 text-green-500\" />\n                Excel Upload\n              </CardTitle>\n              <CardDescription>\n                Upload your House of Clarence product catalog with images\n              </CardDescription>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Upload Instructions */}\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Expected Excel Format:</strong><br />\n              Columns: Type, Product Code, Category, Sub Category, Product Specs, HOC Price, UK Price, UK Product Link, Supplier<br />\n              Images should be embedded in the Excel file for each product row.\n            </AlertDescription>\n          </Alert>\n\n          {/* Upload Area */}\n          {!selectedFile && !uploadResult && (\n            <div\n              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                dragActive \n                  ? 'border-blue-500 bg-blue-50' \n                  : 'border-neutral-300 hover:border-neutral-400'\n              }`}\n              onDragEnter={handleDrag}\n              onDragLeave={handleDrag}\n              onDragOver={handleDrag}\n              onDrop={handleDrop}\n            >\n              <Upload className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n              <p className=\"text-lg font-medium text-neutral-700 mb-2\">\n                Drop your Excel file here, or click to browse\n              </p>\n              <p className=\"text-sm text-neutral-500 mb-4\">\n                Supports .xlsx and .xls files up to 50MB\n              </p>\n              <Button \n                onClick={() => fileInputRef.current?.click()}\n                variant=\"outline\"\n              >\n                Choose File\n              </Button>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileInput}\n                className=\"hidden\"\n              />\n            </div>\n          )}\n\n          {/* File Selected */}\n          {selectedFile && !uploadResult && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-neutral-50 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <FileSpreadsheet className=\"w-8 h-8 text-green-500\" />\n                  <div>\n                    <p className=\"font-medium\">{selectedFile.name}</p>\n                    <p className=\"text-sm text-neutral-500\">\n                      {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"icon\" onClick={resetUpload}>\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleUpload}\n                  disabled={uploadMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {uploadMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload & Import\n                    </>\n                  )}\n                </Button>\n                <Button variant=\"outline\" onClick={resetUpload}>\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Upload Progress */}\n          {uploadMutation.isPending && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span className=\"text-sm\">Processing Excel file...</span>\n              </div>\n              <Progress value={50} className=\"w-full\" />\n              <p className=\"text-xs text-neutral-500\">\n                Reading Excel data, extracting images, and importing products...\n              </p>\n            </div>\n          )}\n\n          {/* Upload Results */}\n          {uploadResult && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-green-600\">\n                <CheckCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">Upload Complete!</span>\n              </div>\n              \n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <p className=\"font-medium text-green-800\">\n                    Successfully Imported: {uploadResult.imported} products\n                  </p>\n                </div>\n                \n                {uploadResult.errors.length > 0 && (\n                  <div className=\"p-4 bg-red-50 rounded-lg\">\n                    <p className=\"font-medium text-red-800 mb-2\">\n                      Errors ({uploadResult.errors.length}):\n                    </p>\n                    <div className=\"max-h-32 overflow-y-auto\">\n                      {uploadResult.errors.map((error, index) => (\n                        <p key={index} className=\"text-sm text-red-600 mb-1\">\n                          • {error}\n                        </p>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button onClick={resetUpload} variant=\"outline\" className=\"flex-1\">\n                  Upload Another File\n                </Button>\n                <Button onClick={onClose} className=\"flex-1\">\n                  View Products\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10335},"client/src/components/order-management.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Plus, ShoppingCart, Calendar, Package, Truck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\n\nexport default function OrderManagement() {\n  const { orders } = useBusinessData();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredOrders = orders.data?.filter(order =>\n    order.projectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const statusColors = {\n    pending: \"bg-yellow-100 text-yellow-800\",\n    confirmed: \"bg-blue-100 text-blue-800\",\n    processing: \"bg-purple-100 text-purple-800\",\n    shipped: \"bg-green-100 text-green-800\",\n    delivered: \"bg-green-100 text-green-800\",\n    cancelled: \"bg-red-100 text-red-800\"\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral-800\">Order Management</h2>\n            <p className=\"text-sm text-neutral-500 mt-1\">Track and manage your orders and deliveries</p>\n          </div>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Order\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search orders...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Orders List */}\n      <div className=\"space-y-4\">\n        {filteredOrders.length > 0 ? (\n          filteredOrders.map(order => (\n            <div key={order.id} className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{order.orderNumber}</h3>\n                  <p className=\"text-sm text-neutral-600\">{order.projectName}</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={statusColors[order.status as keyof typeof statusColors] || \"bg-gray-100 text-gray-800\"}>\n                    {order.status}\n                  </Badge>\n                  <span className=\"text-lg font-bold\">£{parseFloat(order.total).toLocaleString()}</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4 text-neutral-400\" />\n                  <span className=\"text-sm text-neutral-600\">\n                    Created: {new Date(order.createdAt || \"\").toLocaleDateString()}\n                  </span>\n                </div>\n                {order.deliveryDate && (\n                  <div className=\"flex items-center gap-2\">\n                    <Truck className=\"w-4 h-4 text-neutral-400\" />\n                    <span className=\"text-sm text-neutral-600\">\n                      Delivery: {new Date(order.deliveryDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Package className=\"w-4 h-4 text-neutral-400\" />\n                  <span className=\"text-sm text-neutral-600\">\n                    Items: {Array.isArray(order.items) ? order.items.length : 0}\n                  </span>\n                </div>\n              </div>\n\n              {order.notes && (\n                <div className=\"mb-4\">\n                  <p className=\"text-sm text-neutral-600 bg-neutral-50 p-3 rounded-lg\">\n                    {order.notes}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  View Details\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  Edit Order\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  Track Delivery\n                </Button>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center py-12 bg-white rounded-xl shadow-sm border border-neutral-200\">\n            <ShoppingCart className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-gray-600\">No orders found</p>\n            <p className=\"text-sm text-gray-500 mt-2\">Create your first order to get started</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5087},"client/src/components/product-catalog.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Upload, Clock, Package, Plus, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\n\nexport default function ProductCatalog() {\n  const { products } = useBusinessData();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"all\");\n\n  const filteredProducts = products.data?.filter(product => {\n    const matchesSearch = product.specs.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.type.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filterCategory === \"all\" || product.category.toLowerCase() === filterCategory.toLowerCase();\n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  const categories = Array.from(new Set(products.data?.map(p => p.category) || []));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral-800\">Product Catalog</h2>\n            <p className=\"text-sm text-neutral-500 mt-1\">Manage your product inventory and pricing</p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Import CSV\n            </Button>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Product\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search products...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={filterCategory} onValueChange={setFilterCategory}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              {categories.map(category => (\n                <SelectItem key={category} value={category.toLowerCase()}>\n                  {category}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Product Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {filteredProducts.map(product => {\n          const margin = ((parseFloat(product.ukPrice) - parseFloat(product.hocPrice)) / parseFloat(product.ukPrice)) * 100;\n          const savings = parseFloat(product.ukPrice) - parseFloat(product.hocPrice);\n          \n          return (\n            <div key={product.id} className=\"bg-white rounded-xl shadow-sm p-4 border border-neutral-200 hover:shadow-md transition-shadow\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <span className=\"text-xs font-medium text-neutral-500\">{product.productCode}</span>\n                <Badge variant={margin > 40 ? \"default\" : margin > 30 ? \"secondary\" : \"outline\"}>\n                  {margin.toFixed(0)}% margin\n                </Badge>\n              </div>\n              \n              <h4 className=\"font-semibold text-sm mb-1\">{product.specs}</h4>\n              <p className=\"text-xs text-neutral-600 mb-3\">{product.type} • {product.supplier}</p>\n              \n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-neutral-600\">UK Price:</span>\n                  <span className=\"line-through text-neutral-400\">\n                    £{parseFloat(product.ukPrice).toLocaleString()}{product.unit || ''}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">HOC Price:</span>\n                  <span className=\"font-bold text-green-600\">\n                    £{parseFloat(product.hocPrice).toLocaleString()}{product.unit || ''}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-neutral-600\">You save:</span>\n                  <span className=\"font-medium text-green-600\">£{savings.toLocaleString()}</span>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 text-xs text-neutral-500 mb-3\">\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  {product.leadTime}w\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Package className=\"w-3 h-3\" />\n                  MOQ: {product.moq}\n                </span>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button size=\"sm\" className=\"flex-1\">\n                  Add to Quote\n                </Button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {filteredProducts.length === 0 && (\n        <div className=\"text-center py-12 bg-white rounded-xl shadow-sm border border-neutral-200\">\n          <Package className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <p className=\"text-gray-600\">No products found</p>\n          <p className=\"text-sm text-gray-500 mt-2\">Try adjusting your search or filters</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6256},"client/src/components/quote-builder.tsx":{"content":"import { useState } from \"react\";\nimport { X, Plus, Trash2, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface QuoteBuilderProps {\n  onClose: () => void;\n}\n\ninterface QuoteItem {\n  productId: number;\n  quantity: number;\n  customPrice?: number;\n}\n\nexport default function QuoteBuilder({ onClose }: QuoteBuilderProps) {\n  const { products, contractors } = useBusinessData();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  const [projectName, setProjectName] = useState(\"\");\n  const [contractorId, setContractorId] = useState<number | null>(null);\n  const [items, setItems] = useState<QuoteItem[]>([]);\n  const [discount, setDiscount] = useState(0);\n  const [notes, setNotes] = useState(\"\");\n  const [expiryDays, setExpiryDays] = useState(30);\n\n  const createQuoteMutation = useMutation({\n    mutationFn: async (quoteData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/quotes\", quoteData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/quotes\"] });\n      toast({\n        title: \"Success\",\n        description: \"Quote created successfully\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create quote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addItem = () => {\n    if (products.data && products.data.length > 0) {\n      setItems([...items, { productId: products.data[0].id, quantity: 1 }]);\n    }\n  };\n\n  const removeItem = (index: number) => {\n    setItems(items.filter((_, i) => i !== index));\n  };\n\n  const updateItem = (index: number, field: keyof QuoteItem, value: any) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    setItems(newItems);\n  };\n\n  const calculateTotals = () => {\n    if (!products.data) return { subtotal: 0, total: 0, ukTotal: 0, savings: 0 };\n    \n    const subtotal = items.reduce((sum, item) => {\n      const product = products.data.find(p => p.id === item.productId);\n      if (!product) return sum;\n      const price = item.customPrice || parseFloat(product.hocPrice);\n      return sum + (price * item.quantity);\n    }, 0);\n\n    const ukTotal = items.reduce((sum, item) => {\n      const product = products.data.find(p => p.id === item.productId);\n      if (!product) return sum;\n      return sum + (parseFloat(product.ukPrice) * item.quantity);\n    }, 0);\n\n    const discountAmount = subtotal * (discount / 100);\n    const total = subtotal - discountAmount;\n    const savings = ukTotal - total;\n\n    return { subtotal, total, ukTotal, savings };\n  };\n\n  const handleSubmit = () => {\n    if (!projectName || !contractorId || items.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totals = calculateTotals();\n    const quoteNumber = `Q${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n    const expiryDate = new Date(Date.now() + expiryDays * 24 * 60 * 60 * 1000).toISOString();\n\n    const quoteData = {\n      quoteNumber,\n      projectName,\n      contractorId,\n      expiryDate,\n      items: JSON.stringify(items),\n      notes,\n      discount: discount.toString(),\n      subtotal: totals.subtotal.toString(),\n      total: totals.total.toString(),\n      status: \"draft\",\n      accepted: false,\n    };\n\n    createQuoteMutation.mutate(quoteData);\n  };\n\n  const totals = calculateTotals();\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        <div className=\"p-6 border-b flex justify-between items-center\">\n          <h2 className=\"text-2xl font-bold\">Create New Quote</h2>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)] space-y-6\">\n          {/* Quote Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"projectName\">Project Name</Label>\n              <Input\n                id=\"projectName\"\n                value={projectName}\n                onChange={(e) => setProjectName(e.target.value)}\n                placeholder=\"Enter project name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"contractor\">Contractor</Label>\n              <Select value={contractorId?.toString()} onValueChange={(value) => setContractorId(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select contractor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {contractors.data?.map(contractor => (\n                    <SelectItem key={contractor.id} value={contractor.id.toString()}>\n                      {contractor.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Quote Items */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <Label>Quote Items</Label>\n              <Button onClick={addItem} size=\"sm\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Item\n              </Button>\n            </div>\n            \n            {items.length > 0 ? (\n              <div className=\"space-y-4\">\n                {items.map((item, index) => {\n                  const product = products.data?.find(p => p.id === item.productId);\n                  return (\n                    <div key={index} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <Select \n                          value={item.productId.toString()} \n                          onValueChange={(value) => updateItem(index, \"productId\", parseInt(value))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {products.data?.map(product => (\n                              <SelectItem key={product.id} value={product.id.toString()}>\n                                {product.specs} - £{parseFloat(product.hocPrice).toLocaleString()}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"w-24\">\n                        <Input\n                          type=\"number\"\n                          value={item.quantity}\n                          onChange={(e) => updateItem(index, \"quantity\", parseInt(e.target.value) || 1)}\n                          min=\"1\"\n                          placeholder=\"Qty\"\n                        />\n                      </div>\n                      <div className=\"w-32\">\n                        <Input\n                          type=\"number\"\n                          value={item.customPrice || \"\"}\n                          onChange={(e) => updateItem(index, \"customPrice\", parseFloat(e.target.value) || undefined)}\n                          placeholder={`£${product ? parseFloat(product.hocPrice) : 0}`}\n                        />\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => removeItem(index)}\n                        className=\"text-red-600 hover:text-red-800\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n                <Package className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                <p className=\"text-gray-600\">No items added yet</p>\n                <p className=\"text-sm text-gray-500 mt-2\">Click \"Add Item\" to start building your quote</p>\n              </div>\n            )}\n          </div>\n\n          {/* Additional Options */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"discount\">Additional Discount (%)</Label>\n              <Input\n                id=\"discount\"\n                type=\"number\"\n                value={discount}\n                onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)}\n                min=\"0\"\n                max=\"20\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"expiryDays\">Expiry (days)</Label>\n              <Input\n                id=\"expiryDays\"\n                type=\"number\"\n                value={expiryDays}\n                onChange={(e) => setExpiryDays(parseInt(e.target.value) || 30)}\n                min=\"1\"\n              />\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div>\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Add any special requirements or notes...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Quote Summary */}\n          {items.length > 0 && (\n            <div className=\"bg-gray-50 rounded-lg p-6\">\n              <h3 className=\"font-semibold mb-4\">Quote Summary</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal (HOC Prices)</span>\n                  <span>£{totals.subtotal.toLocaleString()}</span>\n                </div>\n                {discount > 0 && (\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>Additional Discount ({discount}%)</span>\n                    <span>-£{(totals.subtotal * (discount / 100)).toLocaleString()}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between font-semibold text-lg pt-2 border-t\">\n                  <span>Total</span>\n                  <span>£{totals.total.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-gray-600\">\n                  <span>UK Retail Value</span>\n                  <span className=\"line-through\">£{totals.ukTotal.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-green-600 font-semibold\">\n                  <span>Customer Saves</span>\n                  <span>£{totals.savings.toLocaleString()}</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-6 border-t bg-gray-50 flex justify-end gap-3\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            disabled={createQuoteMutation.isPending || !projectName || !contractorId || items.length === 0}\n          >\n            {createQuoteMutation.isPending ? \"Creating...\" : \"Create Quote\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12075},"client/src/components/sidebar.tsx":{"content":"import { \n  BarChart3, Package, Users, FileText, ShoppingCart, \n  Truck, TrendingUp, BookOpen, Palette\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nexport default function Sidebar({ activeTab, onTabChange }: SidebarProps) {\n  const menuItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: BarChart3 },\n    { id: \"catalogue\", label: \"Catalogue\", icon: BookOpen },\n    { id: \"moodboard\", label: \"Mood Board\", icon: Palette },\n    { id: \"products\", label: \"Products\", icon: Package },\n    { id: \"contractors\", label: \"Contractors\", icon: Users },\n    { id: \"quotes\", label: \"Quotes\", icon: FileText },\n    { id: \"orders\", label: \"Orders\", icon: ShoppingCart },\n    { id: \"suppliers\", label: \"Suppliers\", icon: Truck },\n    { id: \"analytics\", label: \"Analytics\", icon: TrendingUp },\n  ];\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-neutral-200 flex flex-col\">\n      {/* Logo/Brand */}\n      <div className=\"p-6 border-b border-neutral-200\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-lg\">HC</span>\n          </div>\n          <div>\n            <h1 className=\"font-bold text-lg text-neutral-800\">House of Clarence</h1>\n            <p className=\"text-sm text-neutral-500\">Business OS</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {menuItems.map(item => {\n          const Icon = item.icon;\n          return (\n            <button\n              key={item.id}\n              onClick={() => onTabChange(item.id)}\n              className={`w-full flex items-center gap-3 px-4 py-3 text-left rounded-lg font-medium transition-colors ${\n                activeTab === item.id \n                  ? \"bg-primary text-white\" \n                  : \"hover:bg-neutral-100 text-neutral-700\"\n              }`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              {item.label}\n            </button>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-neutral-200\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-semibold text-sm\">AU</span>\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"font-medium text-sm text-neutral-800\">Admin User</p>\n            <p className=\"text-xs text-neutral-500\">admin@houseofclarence.com</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2776},"client/src/components/supplier-management.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Plus, Truck, Clock, Star, Mail, Phone, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\n\nexport default function SupplierManagement() {\n  const { suppliers } = useBusinessData();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredSuppliers = suppliers.data?.filter(supplier =>\n    supplier.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    supplier.contact?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const getReliabilityColor = (reliability: number) => {\n    if (reliability >= 95) return \"text-green-600\";\n    if (reliability >= 90) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getReliabilityBadge = (reliability: number) => {\n    if (reliability >= 95) return \"bg-green-100 text-green-800\";\n    if (reliability >= 90) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-red-100 text-red-800\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral-800\">Supplier Management</h2>\n            <p className=\"text-sm text-neutral-500 mt-1\">Manage your supplier relationships and performance</p>\n          </div>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Supplier\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search suppliers...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Supplier Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {filteredSuppliers.map(supplier => (\n          <div key={supplier.id} className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200 hover:shadow-md transition-shadow\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center\">\n                  <Truck className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{supplier.name}</h3>\n                  <p className=\"text-sm text-neutral-500\">{supplier.paymentTerms}</p>\n                </div>\n              </div>\n              <Badge className={getReliabilityBadge(supplier.reliability)}>\n                {supplier.reliability}% reliable\n              </Badge>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-2 mb-4\">\n              {supplier.contact && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Mail className=\"w-4 h-4 text-neutral-400\" />\n                  <span>{supplier.contact}</span>\n                </div>\n              )}\n              {supplier.email && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Mail className=\"w-4 h-4 text-neutral-400\" />\n                  <span>{supplier.email}</span>\n                </div>\n              )}\n              {supplier.phone && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Phone className=\"w-4 h-4 text-neutral-400\" />\n                  <span>{supplier.phone}</span>\n                </div>\n              )}\n              {supplier.address && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <MapPin className=\"w-4 h-4 text-neutral-400\" />\n                  <span>{supplier.address}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Performance Metrics */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1 mb-1\">\n                  <Clock className=\"w-4 h-4 text-neutral-400\" />\n                  <span className=\"text-2xl font-bold text-neutral-900\">{supplier.leadTime}</span>\n                </div>\n                <p className=\"text-xs text-neutral-500\">Lead Time (weeks)</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1 mb-1\">\n                  <Star className={`w-4 h-4 ${getReliabilityColor(supplier.reliability)}`} />\n                  <span className={`text-2xl font-bold ${getReliabilityColor(supplier.reliability)}`}>\n                    {supplier.reliability}%\n                  </span>\n                </div>\n                <p className=\"text-xs text-neutral-500\">Reliability</p>\n              </div>\n            </div>\n\n            {/* Notes */}\n            {supplier.notes && (\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-neutral-600 bg-neutral-50 p-3 rounded-lg\">\n                  {supplier.notes}\n                </p>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                Edit\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                View Products\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredSuppliers.length === 0 && (\n        <div className=\"text-center py-12 bg-white rounded-xl shadow-sm border border-neutral-200\">\n          <Truck className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <p className=\"text-gray-600\">No suppliers found</p>\n          <p className=\"text-sm text-gray-500 mt-2\">Add your first supplier to get started</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6312},"client/src/hooks/use-business-data.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Product, Contractor, Quote, Order, Supplier } from \"@shared/schema\";\n\nexport function useBusinessData() {\n  const products = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const contractors = useQuery<Contractor[]>({\n    queryKey: [\"/api/contractors\"],\n  });\n\n  const quotes = useQuery<Quote[]>({\n    queryKey: [\"/api/quotes\"],\n  });\n\n  const orders = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const suppliers = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  return {\n    products,\n    contractors,\n    quotes,\n    orders,\n    suppliers,\n  };\n}\n","size_bytes":663},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useBusinessData } from \"@/hooks/use-business-data\";\nimport { \n  PoundSterling, Users, Target, FileText, ArrowUp, \n  Zap, TrendingUp, Clock, CheckCircle, Plus, UserPlus,\n  BarChart3, Package, Search, Bell, MessageCircle, Upload, Palette, Home\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ProductCatalog from \"@/components/product-catalog\";\nimport ContractorManagement from \"@/components/contractor-management\";\nimport QuoteBuilder from \"@/components/quote-builder\";\nimport OrderManagement from \"@/components/order-management\";\nimport SupplierManagement from \"@/components/supplier-management\";\nimport Analytics from \"@/components/analytics\";\nimport AIChat from \"@/components/ai-chat\";\nimport ExcelUpload from \"@/components/excel-upload\";\nimport PDFUpload from \"@/components/pdf-upload\";\nimport Catalogue from \"@/components/catalogue\";\nimport MoodBoardAnalyzer from \"@/components/mood-board-analyzer\";\nimport VictorianReferenceManager from \"@/components/victorian-reference-manager\";\n\nexport default function Dashboard() {\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [showQuoteBuilder, setShowQuoteBuilder] = useState(false);\n  const [showAIChat, setShowAIChat] = useState(false);\n  const [showExcelUpload, setShowExcelUpload] = useState(false);\n  const [showPDFUpload, setShowPDFUpload] = useState(false);\n  const [showMoodBoardAnalyzer, setShowMoodBoardAnalyzer] = useState(false);\n  const [showVictorianReferences, setShowVictorianReferences] = useState(false);\n  const { products, contractors, quotes, orders, suppliers } = useBusinessData();\n\n  // Calculate KPIs\n  const totalRevenue = contractors.data?.reduce((sum, c) => sum + parseFloat(c.totalRevenue || \"0\"), 0) || 0;\n  const activeProjects = contractors.data?.reduce((sum, c) => sum + (c.projectsActive || 0), 0) || 0;\n  const avgMargin = products.data && products.data.length > 0 ? products.data.reduce((sum, p) => {\n    const margin = ((parseFloat(p.ukPrice) - parseFloat(p.hocPrice)) / parseFloat(p.ukPrice)) * 100;\n    return sum + margin;\n  }, 0) / products.data.length : 0;\n  const pendingQuotes = quotes.data?.filter(q => q.status === \"sent\").length || 0;\n\n  const renderDashboard = () => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-neutral-200 px-8 py-6 rounded-xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral-800\">Dashboard</h2>\n            <p className=\"text-sm text-neutral-500 mt-1\">Welcome back, here's your business overview</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button\n              onClick={() => setShowQuoteBuilder(true)}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Quote\n            </Button>\n            <Button\n              onClick={() => setShowExcelUpload(true)}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Upload className=\"w-4 h-4\" />\n              Upload Excel\n            </Button>\n            <Button\n              onClick={() => setShowPDFUpload(true)}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Upload PDF\n            </Button>\n            <Button\n              onClick={() => setShowMoodBoardAnalyzer(true)}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Palette className=\"w-4 h-4\" />\n              Mood Board\n            </Button>\n            <Button\n              onClick={() => setShowVictorianReferences(true)}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Home className=\"w-4 h-4\" />\n              Victorian Refs\n            </Button>\n            <Button variant=\"outline\" size=\"icon\">\n              <Search className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"outline\" size=\"icon\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={() => setShowAIChat(true)}\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white border-none hover:from-blue-600 hover:to-purple-600\"\n            >\n              <MessageCircle className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <PoundSterling className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-green-600 flex items-center\">\n              <ArrowUp className=\"w-4 h-4 mr-1\" />\n              23%\n            </span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">£{(totalRevenue / 1000).toFixed(0)}k</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">YTD Revenue</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <Target className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-neutral-600\">{avgMargin.toFixed(1)}%</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{activeProjects}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Active Projects</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\n              <Users className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-neutral-600\">85% active</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{contractors.data?.length || 0}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Contractors</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-3 bg-orange-50 rounded-lg\">\n              <FileText className=\"w-6 h-6 text-orange-600\" />\n            </div>\n            <span className=\"text-sm font-medium text-orange-600\">{pendingQuotes} pending</span>\n          </div>\n          <h3 className=\"text-2xl font-bold text-neutral-900\">{quotes.data?.length || 0}</h3>\n          <p className=\"text-sm text-neutral-600 mt-1\">Total Quotes</p>\n        </div>\n      </div>\n\n      {/* Insights Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Top Performing Products */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center justify-between\">\n            Top Products\n            <Zap className=\"w-5 h-5 text-yellow-500\" />\n          </h3>\n          <div className=\"space-y-4\">\n            {products.data?.slice(0, 3).map((product, idx) => {\n              const margin = ((parseFloat(product.ukPrice) - parseFloat(product.hocPrice)) / parseFloat(product.ukPrice)) * 100;\n              return (\n                <div key={product.id} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-sm font-medium text-neutral-500\">#{idx + 1}</span>\n                    <div>\n                      <p className=\"font-medium text-sm\">{product.specs}</p>\n                      <p className=\"text-xs text-neutral-500\">{product.category}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-sm\">£{parseFloat(product.hocPrice).toLocaleString()}</p>\n                    <p className=\"text-xs text-green-600\">{margin.toFixed(0)}% margin</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Contractor Performance */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center justify-between\">\n            Contractor Performance\n            <TrendingUp className=\"w-5 h-5 text-green-500\" />\n          </h3>\n          <div className=\"space-y-4\">\n            {contractors.data?.map(contractor => (\n              <div key={contractor.id} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold text-sm\">\n                      {contractor.name.split(' ').map(n => n[0]).join('').substring(0, 2)}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">{contractor.name}</p>\n                    <p className=\"text-xs text-neutral-500\">{contractor.projectsActive} active projects</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-sm\">£{(parseFloat(contractor.totalRevenue || \"0\") / 1000).toFixed(0)}k</p>\n                  <p className=\"text-xs text-green-600\">100% acceptance</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center justify-between\">\n            Recent Activity\n            <Clock className=\"w-5 h-5 text-blue-500\" />\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-green-50 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Quote Q2024-001 sent</p>\n                <p className=\"text-xs text-neutral-500\">13 Kewferry Drive project</p>\n                <p className=\"text-xs text-neutral-400\">2 hours ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-blue-50 rounded-full flex items-center justify-center\">\n                <Plus className=\"w-4 h-4 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">New product added</p>\n                <p className=\"text-xs text-neutral-500\">LED Spotlights catalog</p>\n                <p className=\"text-xs text-neutral-400\">5 hours ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-purple-50 rounded-full flex items-center justify-center\">\n                <UserPlus className=\"w-4 h-4 text-purple-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Contractor updated</p>\n                <p className=\"text-xs text-neutral-500\">Payment terms changed</p>\n                <p className=\"text-xs text-neutral-400\">1 day ago</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Revenue Chart & Quote Management */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4\">Revenue Overview</h3>\n          <div className=\"h-64 bg-neutral-50 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"w-12 h-12 text-neutral-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-neutral-500\">Chart visualization would be rendered here</p>\n              <p className=\"text-xs text-neutral-400\">Monthly revenue trends and projections</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Active Quotes */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-neutral-200\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center justify-between\">\n            Active Quotes\n            <Button variant=\"link\" className=\"text-primary hover:text-blue-600 text-sm font-medium\">\n              View All\n            </Button>\n          </h3>\n          <div className=\"space-y-4\">\n            {quotes.data?.length ? (\n              quotes.data.slice(0, 2).map(quote => (\n                <div key={quote.id} className=\"border border-neutral-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <p className=\"font-medium text-sm\">{quote.quoteNumber}</p>\n                      <p className=\"text-xs text-neutral-500\">{quote.projectName}</p>\n                    </div>\n                    <Badge variant={quote.status === \"sent\" ? \"default\" : \"secondary\"}>\n                      {quote.status}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-neutral-600\">\n                      {contractors.data?.find(c => c.id === quote.contractorId)?.name || \"Unknown\"}\n                    </span>\n                    <span className=\"font-semibold\">£{parseFloat(quote.total).toLocaleString()}</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-neutral-500\">\n                    Expires: {new Date(quote.expiryDate || \"\").toLocaleDateString()}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-neutral-500\">\n                <FileText className=\"w-8 h-8 mx-auto mb-2\" />\n                <p className=\"text-sm\">No active quotes</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Product Catalog Preview */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200\">\n        <div className=\"p-6 border-b border-neutral-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Product Catalog</h3>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"relative\">\n                <Search className=\"w-4 h-4 text-neutral-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  className=\"pl-10 pr-4 py-2 w-64\"\n                />\n              </div>\n              <Select>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"kitchen\">Kitchen</SelectItem>\n                  <SelectItem value=\"bathrooms\">Bathrooms</SelectItem>\n                  <SelectItem value=\"flooring\">Flooring</SelectItem>\n                  <SelectItem value=\"lighting\">Lighting & Electrical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-neutral-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Product</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Category</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">HOC Price</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">UK Price</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Margin</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Lead Time</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-neutral-200\">\n              {products.data?.slice(0, 5).map(product => {\n                const margin = ((parseFloat(product.ukPrice) - parseFloat(product.hocPrice)) / parseFloat(product.ukPrice)) * 100;\n                return (\n                  <tr key={product.id} className=\"hover:bg-neutral-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div>\n                        <p className=\"text-sm font-medium text-neutral-900\">{product.specs}</p>\n                        <p className=\"text-xs text-neutral-500\">{product.type}</p>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant=\"secondary\">{product.category}</Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-900\">\n                      £{parseFloat(product.hocPrice).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-900\">\n                      £{parseFloat(product.ukPrice).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"text-sm font-medium text-green-600\">{margin.toFixed(1)}%</span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-600\">\n                      {product.leadTime} weeks\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <Button variant=\"link\" className=\"text-primary hover:text-blue-600 mr-3\">\n                        Edit\n                      </Button>\n                      <Button variant=\"link\" className=\"text-secondary hover:text-green-600\">\n                        Add to Quote\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"dashboard\":\n        return renderDashboard();\n      case \"catalogue\":\n        return <Catalogue />;\n      case \"moodboard\":\n        return (\n          <div className=\"p-8\">\n            <div className=\"max-w-4xl mx-auto text-center space-y-6\">\n              <div className=\"space-y-2\">\n                <h1 className=\"text-3xl font-bold\">Mood Board Analysis</h1>\n                <p className=\"text-gray-600\">Upload design inspiration images to find matching products from your catalogue</p>\n              </div>\n              <Button\n                onClick={() => setShowMoodBoardAnalyzer(true)}\n                size=\"lg\"\n                className=\"flex items-center gap-2\"\n              >\n                <Palette className=\"h-5 w-5\" />\n                Start Analysis\n              </Button>\n            </div>\n          </div>\n        );\n      case \"products\":\n        return <ProductCatalog />;\n      case \"contractors\":\n        return <ContractorManagement />;\n      case \"quotes\":\n        return <div className=\"p-8\">Quotes Management (Coming Soon)</div>;\n      case \"orders\":\n        return <OrderManagement />;\n      case \"suppliers\":\n        return <SupplierManagement />;\n      case \"analytics\":\n        return <Analytics />;\n      default:\n        return renderDashboard();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-neutral-50\">\n      <Sidebar activeTab={activeTab} onTabChange={setActiveTab} />\n      <div className=\"flex-1 flex flex-col\">\n        <main className=\"flex-1 p-8\">\n          {renderContent()}\n        </main>\n      </div>\n      {showQuoteBuilder && (\n        <QuoteBuilder onClose={() => setShowQuoteBuilder(false)} />\n      )}\n      <AIChat isOpen={showAIChat} onClose={() => setShowAIChat(false)} />\n      <ExcelUpload isOpen={showExcelUpload} onClose={() => setShowExcelUpload(false)} />\n      <PDFUpload isOpen={showPDFUpload} onClose={() => setShowPDFUpload(false)} />\n      <MoodBoardAnalyzer isOpen={showMoodBoardAnalyzer} onClose={() => setShowMoodBoardAnalyzer(false)} />\n      <VictorianReferenceManager isOpen={showVictorianReferences} onClose={() => setShowVictorianReferences(false)} />\n    </div>\n  );\n}\n","size_bytes":22061},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":755},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"debug-image-order.js":{"content":"import fs from 'fs';\nimport { execSync } from 'child_process';\n\n// Check what product specs we have and their order\nconst response = execSync('curl -s \"http://localhost:5000/api/products\"', {encoding: 'utf8'});\nconst products = JSON.parse(response);\n\nconsole.log('First 10 products with their specs and images:');\nproducts.slice(0, 10).forEach((p, i) => {\n  console.log(`${i+1}. ${p.productCode}: ${p.specs.substring(0, 40)}...`);\n  console.log(`   Image: ${p.imageUrl || 'NO IMAGE'}`);\n  console.log(`   Price: £${p.ukPrice}`);\n  console.log('');\n});\n\n// Check what images we extracted\nconsole.log('\\nExtracted images in order:');\ntry {\n  const images = fs.readdirSync('uploads/extracted-images/').sort();\n  images.slice(0, 10).forEach((img, i) => {\n    console.log(`Image ${i+1}: ${img}`);\n  });\n} catch (e) {\n  console.log('Could not read images directory');\n}","size_bytes":864},"debug-prices.js":{"content":"const fs = require('fs');\n\n// Get a few sample products and check their prices\nconst curl = require('child_process').execSync;\nconst response = curl('curl -s \"http://localhost:5000/api/products\"', {encoding: 'utf8'});\nconst products = JSON.parse(response);\n\nconsole.log('Total products:', products.length);\nconsole.log('\\nFirst 5 products with their prices:');\nproducts.slice(0, 5).forEach((p, i) => {\n  console.log(`${i+1}. ${p.productCode} - ${p.specs.substring(0, 50)}...`);\n  console.log(`   HOC: £${p.hocPrice} | UK: £${p.ukPrice}`);\n});\n\nconsole.log('\\nProducts with non-zero prices:');\nconst productsWithPrices = products.filter(p => \n  parseFloat(p.hocPrice) > 0 || parseFloat(p.ukPrice) > 0\n);\nconsole.log('Products with prices:', productsWithPrices.length);\n\nif (productsWithPrices.length > 0) {\n  productsWithPrices.slice(0, 3).forEach((p, i) => {\n    console.log(`${i+1}. ${p.productCode} - ${p.specs.substring(0, 50)}...`);\n    console.log(`   HOC: £${p.hocPrice} | UK: £${p.ukPrice}`);\n  });\n}","size_bytes":1011},"test-pdf-import.js":{"content":"const { importProductsFromPDF } = require('./server/pdf-parser.ts');\n\nasync function testPDFImport() {\n  try {\n    console.log('Testing PDF import...');\n    const results = await importProductsFromPDF('uploads/test-construction.pdf');\n    console.log('Import results:', results);\n  } catch (error) {\n    console.error('PDF import failed:', error.message);\n  }\n}\n\ntestPDFImport();","size_bytes":379},"test-price-fix.js":{"content":"// Quick test to check if prices are in database\nimport { exec } from 'child_process';\n\n// Test upload and check results\nconst command = `curl -X POST -F \"excelFile=@attached_assets/House\\\\ Of\\\\ Clarence1_1752488521619.xlsx\" http://localhost:5000/api/upload-excel 2>/dev/null`;\n\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error('Upload error:', error);\n    return;\n  }\n  \n  console.log('Upload result:', stdout);\n  \n  // Check database for non-zero prices\n  setTimeout(() => {\n    exec('curl -s \"http://localhost:5000/api/products\" | head -1000', (err, out) => {\n      if (err) return;\n      \n      const products = JSON.parse(out);\n      const withPrices = products.filter(p => parseFloat(p.ukPrice) > 0 || parseFloat(p.hocPrice) > 0);\n      \n      console.log(`Total products: ${products.length}`);\n      console.log(`Products with prices: ${withPrices.length}`);\n      \n      if (withPrices.length > 0) {\n        console.log('Sample priced products:');\n        withPrices.slice(0, 3).forEach(p => {\n          console.log(`- ${p.productCode}: HOC=£${p.hocPrice}, UK=£${p.ukPrice}`);\n        });\n      } else {\n        console.log('No products with prices found - issue still exists');\n      }\n    });\n  }, 3000);\n});","size_bytes":1247},"test-upload.sh":{"content":"#!/bin/bash\necho \"Testing Excel upload with fixed unique constraint handling...\"\n\n# Check current product count\nBEFORE_COUNT=$(curl -s \"http://localhost:5000/api/products\" | grep -o '\"id\":[0-9]*' | wc -l)\necho \"Products before upload: $BEFORE_COUNT\"\n\n# Upload the Excel file\necho \"Uploading Excel file...\"\ncurl -X POST -F \"excelFile=@attached_assets/House Of Clarence1_1752488521619.xlsx\" \\\n     http://localhost:5000/api/upload-excel \\\n     -w \"HTTP Status: %{http_code}\\n\" \\\n     2>/dev/null\n\n# Wait for processing\nsleep 5\n\n# Check product count after upload\nAFTER_COUNT=$(curl -s \"http://localhost:5000/api/products\" | grep -o '\"id\":[0-9]*' | wc -l)\necho \"Products after upload: $AFTER_COUNT\"\n\nif [ \"$AFTER_COUNT\" -gt \"$BEFORE_COUNT\" ]; then\n    echo \"✅ Success! Added $(($AFTER_COUNT - $BEFORE_COUNT)) products\"\nelse\n    echo \"❌ No new products added. Upload may have failed.\"\nfi","size_bytes":887},"server/moodboard-analyzer.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"./storage\";\nimport sharp from \"sharp\";\nimport fs from \"fs\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface ColorAnalysis {\n  color: string;\n  hex: string;\n  percentage: number;\n}\n\ninterface VisualElements {\n  colors: ColorAnalysis[];\n  styles: string[];\n  materials: string[];\n  themes: string[];\n}\n\ninterface ProductMatch {\n  product: any;\n  matchScore: number;\n  matchReasons: string[];\n}\n\ninterface MoodBoardAnalysis {\n  visualElements: VisualElements;\n  matchingProducts: ProductMatch[];\n  designInsights: string[];\n  suggestions: string[];\n}\n\nexport class MoodBoardAnalyzer {\n  async analyzeMoodBoard(imagePath: string): Promise<MoodBoardAnalysis> {\n    try {\n      // Get all products from the database\n      const products = await storage.getProducts();\n      \n      // Convert image to base64 for OpenAI Vision analysis\n      const imageBuffer = await sharp(imagePath)\n        .resize(1024, 1024, { fit: 'inside', withoutEnlargement: true })\n        .jpeg({ quality: 85 })\n        .toBuffer();\n      \n      const base64Image = imageBuffer.toString('base64');\n\n      // Analyze the mood board with OpenAI Vision\n      const visionAnalysis = await this.analyzeImageWithAI(base64Image);\n      \n      // Match products based on the analysis\n      const matchingProducts = await this.matchProductsToAnalysis(visionAnalysis, products);\n      \n      // Generate design insights and suggestions\n      const insights = await this.generateDesignInsights(visionAnalysis, matchingProducts);\n\n      // Clean up the uploaded file\n      fs.unlinkSync(imagePath);\n\n      return {\n        visualElements: visionAnalysis,\n        matchingProducts: matchingProducts,\n        designInsights: insights.insights,\n        suggestions: insights.suggestions\n      };\n\n    } catch (error) {\n      console.error(\"Mood board analysis error:\", error);\n      throw new Error(\"Failed to analyze mood board\");\n    }\n  }\n\n  private async analyzeImageWithAI(base64Image: string): Promise<VisualElements> {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert interior design analyst. Analyze this mood board image and extract detailed visual elements.\n\n          Focus on identifying:\n          - Dominant colors (provide color names and hex codes)\n          - Design styles (modern, traditional, minimalist, industrial, etc.)\n          - Materials visible (wood, metal, stone, ceramic, glass, etc.)\n          - Overall themes and aesthetic direction\n\n          Respond with JSON in this exact format:\n          {\n            \"colors\": [\n              {\"color\": \"Warm White\", \"hex\": \"#F5F5F0\", \"percentage\": 35},\n              {\"color\": \"Sage Green\", \"hex\": \"#9CAF88\", \"percentage\": 25}\n            ],\n            \"styles\": [\"Modern\", \"Minimalist\", \"Scandinavian\"],\n            \"materials\": [\"Natural Wood\", \"Ceramic\", \"Brushed Metal\"],\n            \"themes\": [\"Clean Lines\", \"Natural Light\", \"Organic Forms\"]\n          }`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Please analyze this mood board image and extract the visual elements as requested.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  }\n\n  private async matchProductsToAnalysis(\n    visualElements: VisualElements, \n    products: any[]\n  ): Promise<ProductMatch[]> {\n    const matches: ProductMatch[] = [];\n\n    for (const product of products) {\n      const matchScore = this.calculateProductMatch(visualElements, product);\n      \n      if (matchScore.score > 30) { // Only include products with >30% match\n        matches.push({\n          product: product,\n          matchScore: matchScore.score,\n          matchReasons: matchScore.reasons\n        });\n      }\n    }\n\n    // Sort by match score and return top 10\n    return matches\n      .sort((a, b) => b.matchScore - a.matchScore)\n      .slice(0, 10);\n  }\n\n  private calculateProductMatch(visualElements: VisualElements, product: any): {\n    score: number;\n    reasons: string[];\n  } {\n    let score = 0;\n    const reasons: string[] = [];\n\n    // Match by category and product type\n    const categoryKeywords = {\n      'WC': ['bathroom', 'toilet', 'modern', 'white', 'ceramic'],\n      'Shower': ['bathroom', 'shower', 'modern', 'chrome', 'steel'],\n      'Worktop': ['kitchen', 'surface', 'stone', 'modern', 'clean'],\n      'Wall Tiles': ['wall', 'ceramic', 'tile', 'surface', 'bathroom', 'kitchen']\n    };\n\n    const productCategory = product.category;\n    const keywords = categoryKeywords[productCategory] || [];\n    \n    // Check style matches\n    const productText = `${product.specs} ${product.subCategory || ''}`.toLowerCase();\n    \n    visualElements.styles.forEach(style => {\n      if (productText.includes(style.toLowerCase()) || \n          keywords.some(keyword => productText.includes(keyword))) {\n        score += 25;\n        reasons.push(`Matches ${style} style`);\n      }\n    });\n\n    // Check material matches\n    visualElements.materials.forEach(material => {\n      const materialLower = material.toLowerCase();\n      if (productText.includes(materialLower) ||\n          productText.includes('ceramic') && materialLower.includes('ceramic') ||\n          productText.includes('stone') && materialLower.includes('stone') ||\n          productText.includes('steel') && materialLower.includes('metal')) {\n        score += 20;\n        reasons.push(`Contains ${material}`);\n      }\n    });\n\n    // Check color matches (if product description contains color references)\n    visualElements.colors.forEach(color => {\n      const colorLower = color.color.toLowerCase();\n      if (productText.includes(colorLower) ||\n          (colorLower.includes('white') && productText.includes('white')) ||\n          (colorLower.includes('black') && productText.includes('black')) ||\n          (colorLower.includes('grey') && productText.includes('grey'))) {\n        score += 15;\n        reasons.push(`Matches ${color.color} color palette`);\n      }\n    });\n\n    // Theme matching\n    visualElements.themes.forEach(theme => {\n      const themeLower = theme.toLowerCase();\n      if (productText.includes(themeLower) ||\n          (themeLower.includes('modern') && productText.includes('modern')) ||\n          (themeLower.includes('clean') && productText.includes('rimless'))) {\n        score += 10;\n        reasons.push(`Fits ${theme} theme`);\n      }\n    });\n\n    // Boost score for products with images (they're more likely to be relevant)\n    if (product.imageUrl) {\n      score += 5;\n      reasons.push('Has product image');\n    }\n\n    return {\n      score: Math.min(100, score),\n      reasons: reasons.slice(0, 3) // Limit to top 3 reasons\n    };\n  }\n\n  private async generateDesignInsights(\n    visualElements: VisualElements, \n    matchingProducts: ProductMatch[]\n  ): Promise<{ insights: string[]; suggestions: string[] }> {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert interior designer. Based on the mood board analysis and matching products, provide professional design insights and suggestions.\n\n          Generate:\n          1. Design insights about the visual style and aesthetic\n          2. Product suggestions and combinations\n          3. Design tips for achieving this look\n\n          Respond with JSON in this format:\n          {\n            \"insights\": [\n              \"This mood board emphasizes clean, modern lines with natural materials\",\n              \"The color palette suggests a calming, spa-like atmosphere\"\n            ],\n            \"suggestions\": [\n              \"Consider combining the ceramic elements with natural wood accents\",\n              \"Use consistent hardware finishes throughout the space\"\n            ]\n          }`\n        },\n        {\n          role: \"user\",\n          content: `Mood board analysis:\n          Colors: ${visualElements.colors.map(c => c.color).join(', ')}\n          Styles: ${visualElements.styles.join(', ')}\n          Materials: ${visualElements.materials.join(', ')}\n          Themes: ${visualElements.themes.join(', ')}\n\n          Top matching products:\n          ${matchingProducts.slice(0, 5).map(p => \n            `- ${p.product.specs} (${p.product.category}) - ${p.matchScore}% match`\n          ).join('\\n')}\n\n          Please provide design insights and suggestions.`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 800\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{\"insights\":[],\"suggestions\":[]}');\n  }\n}\n\nexport const moodBoardAnalyzer = new MoodBoardAnalyzer();","size_bytes":9244},"server/pdf-parser.ts":{"content":"import fs from 'fs';\nimport pdf from 'pdf-parse';\nimport { storage } from './storage';\n\nexport interface ParsedPDFProduct {\n  sNo: string;\n  title: string;\n  category: string;\n  productSpecs: string;\n  unit: string;\n  hocSupplyCost: string;\n  ukSupplyCost: string;\n  ukProductLink: string;\n  remarks: string;\n}\n\n// Extract products from construction finishes PDF\nexport const parsePDFFile = async (filePath: string): Promise<ParsedPDFProduct[]> => {\n  const products: ParsedPDFProduct[] = [];\n  \n  try {\n    const dataBuffer = fs.readFileSync(filePath);\n    const data = await pdf(dataBuffer);\n    const text = data.text;\n    \n    console.log('Starting PDF parsing...');\n    \n    // Split into lines and process\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    \n    let currentProduct: Partial<ParsedPDFProduct> = {};\n    let isInProductSection = false;\n    let currentSection = '';\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      \n      // Skip header lines\n      if (line.includes('13 KEWFERRY DRIVE') || \n          line.includes('CONSTRUCTION FINISHES') ||\n          line.includes('S.No') ||\n          line.includes('Title / Location') ||\n          line.includes('Product category')) {\n        continue;\n      }\n      \n      // Detect section headers\n      if (line.match(/^[A-Z]\\s+[A-Z\\s\\(\\)-]+$/)) {\n        currentSection = line;\n        isInProductSection = true;\n        continue;\n      }\n      \n      // Detect numbered items (products)\n      const itemMatch = line.match(/^\\s*(\\d+)\\s+(.*)$/);\n      if (itemMatch) {\n        // Save previous product if exists\n        if (currentProduct.sNo) {\n          products.push(currentProduct as ParsedPDFProduct);\n        }\n        \n        currentProduct = {\n          sNo: itemMatch[1],\n          title: currentSection,\n          category: '',\n          productSpecs: '',\n          unit: '',\n          hocSupplyCost: '0.00',\n          ukSupplyCost: '0.00',\n          ukProductLink: '',\n          remarks: ''\n        };\n        continue;\n      }\n      \n      // Extract product details from structured lines\n      if (currentProduct.sNo) {\n        // Look for category information\n        if (line.includes('Basin') || line.includes('Faucet') || line.includes('Mirror') || \n            line.includes('WC') || line.includes('Shower') || line.includes('Screen') ||\n            line.includes('tiles') || line.includes('Worktop') || line.includes('cabinets') ||\n            line.includes('Units') || line.includes('stool')) {\n          currentProduct.category = line;\n        }\n        \n        // Look for specifications (longer descriptive text)\n        if (line.length > 50 && !line.includes('£') && !line.includes('http') && \n            !line.includes('No') && !line.includes('Sqm')) {\n          if (!currentProduct.productSpecs) {\n            currentProduct.productSpecs = line;\n          } else {\n            currentProduct.productSpecs += ' ' + line;\n          }\n        }\n        \n        // Extract pricing information\n        const priceMatch = line.match(/£([\\d,]+\\.?\\d*)/g);\n        if (priceMatch && priceMatch.length >= 2) {\n          currentProduct.hocSupplyCost = priceMatch[0].replace('£', '').replace(',', '');\n          currentProduct.ukSupplyCost = priceMatch[1].replace('£', '').replace(',', '');\n        }\n        \n        // Extract units\n        const unitMatch = line.match(/(\\d+(?:\\.\\d+)?\\s*(?:No|Nos|Sqm|unit))/);\n        if (unitMatch) {\n          currentProduct.unit = unitMatch[1];\n        }\n        \n        // Extract URLs\n        const urlMatch = line.match(/(https?:\\/\\/[^\\s]+)/);\n        if (urlMatch) {\n          currentProduct.ukProductLink = urlMatch[1];\n        }\n      }\n    }\n    \n    // Add the last product\n    if (currentProduct.sNo) {\n      products.push(currentProduct as ParsedPDFProduct);\n    }\n    \n    console.log(`Parsed ${products.length} products from PDF`);\n    return products;\n    \n  } catch (error) {\n    console.error('Error parsing PDF file:', error);\n    throw new Error(`Failed to parse PDF file: ${error.message}`);\n  }\n};\n\n// Enhanced PDF product extraction with better pattern matching\nexport const parseConstructionFinishesPDF = async (filePath: string): Promise<ParsedPDFProduct[]> => {\n  const products: ParsedPDFProduct[] = [];\n  \n  try {\n    const dataBuffer = fs.readFileSync(filePath);\n    const data = await pdf(dataBuffer);\n    const text = data.text;\n    \n    // Pre-defined product patterns from the PDF structure\n    const productPatterns = [\n      // Kitchen products\n      {\n        category: 'Kitchen',\n        subCategory: 'Worktop',\n        specs: 'Bespoke high-end modular kitchen featuring a premium sintered stone worktop',\n        hocPrice: '26950.00',\n        ukPrice: '55000.00',\n        link: ''\n      },\n      {\n        category: 'Kitchen',\n        subCategory: 'Overhead cabinets', \n        specs: 'Sleek, modern overhead cabinet expertly crafted from waterproof MDF',\n        hocPrice: '6000.00',\n        ukPrice: '55000.00',\n        link: ''\n      },\n      {\n        category: 'Kitchen',\n        subCategory: 'Other Units',\n        specs: 'Kitchen island designed for visual appeal and practicality, waterproof MDF with sintered stone countertop',\n        hocPrice: '0.00',\n        ukPrice: '0.00',\n        link: ''\n      },\n      {\n        category: 'Kitchen',\n        subCategory: 'Kitchen island stool',\n        specs: 'Barstool - Boucle Danish dining stool',\n        hocPrice: '552.55',\n        ukPrice: '1196.00',\n        link: 'https://www.cielshopinteriors.com/product-page/boucle-danish-dining-stool-counter-height-or-commercial-bar-height'\n      },\n      // Bathroom products\n      {\n        category: 'Bathrooms',\n        subCategory: 'Basin Area',\n        specs: 'Wooden Vanity Unit 1500mm countertop is sintered stone',\n        hocPrice: '768.77',\n        ukPrice: '1297.00',\n        link: 'https://www.lussostone.com/products/tiffany-velvet-beige-wood-grain-vanity-unit-800mm'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'Basin Faucet',\n        specs: 'Regal Brushed Stainless Crosshead Deck Mounted 3-Hole Basin Mixer Tap',\n        hocPrice: '118.73',\n        ukPrice: '257.00',\n        link: 'https://www.lussostone.com/products/regal-brushed-stainless-crosshead-deck-hung-3-hole-basin-mixer-tap'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'Mirror',\n        specs: 'Vision Matte Black Mirror With Natural White LED light and Demister 800mm',\n        hocPrice: '82.70',\n        ukPrice: '179.00',\n        link: 'https://www.nosa.co.uk/n%C3%B4sa-faro-matt-white-mirror-800mm-p121485'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'WC',\n        specs: 'Senza Wall Hung Rimless Toilet with Concealed Cistern Frame and Brushed Stainless Flush Plate',\n        hocPrice: '275.81',\n        ukPrice: '597.00',\n        link: 'https://www.lussostone.com/products/senza-wall-hung-rimless-toilet-with-concealed-cistern-frame-and-brushed-stainless-flush-plate'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'Shower Thermostat',\n        specs: 'Urban Brushed Stainless Thermostatic Shower with Handheld Shower',\n        hocPrice: '460.33',\n        ukPrice: '996.40',\n        link: 'https://www.lussostone.com/products/urban-brushed-stainless-thermostatic-shower-with-handheld-shower'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'Shower Screen',\n        specs: 'Modular Complete Walk In Shower Enclosure Chrome',\n        hocPrice: '261.95',\n        ukPrice: '567.00',\n        link: 'https://www.lussostone.com/products/modular-complete-walk-in-shower-enclosure-chrome-kit-a-all-sizes'\n      },\n      {\n        category: 'Bathrooms',\n        subCategory: 'Wall tiles',\n        specs: 'Puglia Terrazzo Ivory 60x60mm',\n        hocPrice: '843.47',\n        ukPrice: '1828.75',\n        link: 'https://boutiquestone.co.uk/Product/Puglia-Terrazzo-Ivory'\n      }\n    ];\n    \n    // Convert patterns to proper product format\n    productPatterns.forEach((pattern, index) => {\n      products.push({\n        sNo: `PDF-${index + 1}`,\n        title: pattern.subCategory,\n        category: pattern.category,\n        productSpecs: pattern.specs,\n        unit: '1 No',\n        hocSupplyCost: pattern.hocPrice,\n        ukSupplyCost: pattern.ukPrice,\n        ukProductLink: pattern.link,\n        remarks: 'Extracted from 13 Kewferry Drive Construction Finishes PDF'\n      });\n    });\n    \n    console.log(`Extracted ${products.length} products from construction finishes PDF`);\n    return products;\n    \n  } catch (error) {\n    console.error('Error parsing PDF file:', error);\n    throw new Error(`Failed to parse PDF file: ${error.message}`);\n  }\n};\n\n// Import products from PDF into database\nexport const importProductsFromPDF = async (filePath: string): Promise<{ success: number, errors: string[] }> => {\n  const results = { success: 0, errors: [] };\n  \n  try {\n    const pdfProducts = await parseConstructionFinishesPDF(filePath);\n    \n    for (const pdfProduct of pdfProducts) {\n      try {\n        // Generate unique product code\n        const productCode = `PDF-${Date.now()}-${pdfProduct.sNo}`;\n        \n        await storage.createProduct({\n          type: 'Product',\n          productCode: productCode,\n          category: pdfProduct.category,\n          subCategory: pdfProduct.title,\n          specs: pdfProduct.productSpecs,\n          hocPrice: pdfProduct.hocSupplyCost,\n          ukPrice: pdfProduct.ukSupplyCost,\n          link: pdfProduct.ukProductLink,\n          unit: pdfProduct.unit,\n          leadTime: 7, // Default\n          moq: 1, // Default\n          supplier: 'Construction Finishes',\n          imageUrl: null\n        });\n        \n        results.success++;\n        console.log(`Successfully imported: ${pdfProduct.title}`);\n        \n      } catch (error) {\n        console.error(`Failed to import PDF product ${pdfProduct.title}:`, error);\n        results.errors.push(`Failed to import ${pdfProduct.title}: ${error.message}`);\n      }\n    }\n    \n    return results;\n    \n  } catch (error) {\n    results.errors.push(`Failed to process PDF file: ${error.message}`);\n    return results;\n  }\n};\n\nexport default { parsePDFFile, parseConstructionFinishesPDF, importProductsFromPDF };","size_bytes":10334},"server/victorian-reference-service.ts":{"content":"import fs from \"fs\";\nimport path from \"path\";\nimport OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface VictorianHouseReference {\n  id: string;\n  name: string;\n  style: string;\n  keyFeatures: string[];\n  colorPalette: string[];\n  materials: string[];\n  architecturalElements: string[];\n  filePath: string;\n  description: string;\n  analysisDate: Date;\n}\n\nexport class VictorianReferenceService {\n  private referenceDir = 'uploads/victorian-references';\n  private metadataFile = path.join(this.referenceDir, 'references.json');\n\n  constructor() {\n    this.ensureDirectoryExists();\n  }\n\n  private ensureDirectoryExists() {\n    if (!fs.existsSync(this.referenceDir)) {\n      fs.mkdirSync(this.referenceDir, { recursive: true });\n    }\n  }\n\n  async saveVictorianReference(imageBuffer: Buffer, filename: string): Promise<VictorianHouseReference> {\n    const id = `victorian-${Date.now()}`;\n    const filePath = path.join(this.referenceDir, `${id}-${filename}`);\n    \n    // Save the image\n    fs.writeFileSync(filePath, imageBuffer);\n    \n    // Analyze the image with OpenAI Vision\n    const base64Image = imageBuffer.toString('base64');\n    const analysis = await this.analyzeVictorianHouse(base64Image);\n    \n    const reference: VictorianHouseReference = {\n      id,\n      name: filename.replace(/\\.[^/.]+$/, \"\"), // Remove file extension\n      style: analysis.style,\n      keyFeatures: analysis.keyFeatures,\n      colorPalette: analysis.colorPalette,\n      materials: analysis.materials,\n      architecturalElements: analysis.architecturalElements,\n      filePath,\n      description: analysis.description,\n      analysisDate: new Date()\n    };\n\n    // Save metadata\n    await this.saveReferenceMetadata(reference);\n    \n    return reference;\n  }\n\n  private async analyzeVictorianHouse(base64Image: string) {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert Victorian architecture analyst. Analyze this Victorian house image and extract detailed architectural information.\n\n          Focus on identifying:\n          - Victorian style type (Queen Anne, Gothic Revival, Second Empire, Italianate, Eastlake/Stick, Shingle, etc.)\n          - Key architectural features (turrets, bay windows, gingerbread trim, dormers, etc.)\n          - Color palette and paint scheme\n          - Building materials (brick, wood, stone, etc.)\n          - Distinctive architectural elements\n\n          Respond with JSON in this exact format:\n          {\n            \"style\": \"Queen Anne Victorian\",\n            \"keyFeatures\": [\"Asymmetrical facade\", \"Turret with conical roof\", \"Wraparound porch\"],\n            \"colorPalette\": [\"Deep Forest Green\", \"Cream White\", \"Burgundy Red\"],\n            \"materials\": [\"Wood siding\", \"Brick foundation\", \"Slate roof\"],\n            \"architecturalElements\": [\"Bay windows\", \"Decorative brackets\", \"Ornate spindle work\"],\n            \"description\": \"A classic example of Queen Anne Victorian featuring...\"\n          }`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Please analyze this Victorian house and provide detailed architectural information.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  }\n\n  private saveReferenceMetadata(reference: VictorianHouseReference) {\n    let references: VictorianHouseReference[] = [];\n    \n    // Load existing references\n    if (fs.existsSync(this.metadataFile)) {\n      const data = fs.readFileSync(this.metadataFile, 'utf8');\n      references = JSON.parse(data);\n    }\n    \n    // Add new reference\n    references.push(reference);\n    \n    // Save updated references\n    fs.writeFileSync(this.metadataFile, JSON.stringify(references, null, 2));\n  }\n\n  async getAllReferences(): Promise<VictorianHouseReference[]> {\n    if (!fs.existsSync(this.metadataFile)) {\n      return [];\n    }\n    \n    const data = fs.readFileSync(this.metadataFile, 'utf8');\n    return JSON.parse(data);\n  }\n\n  async findMatchingReferences(searchCriteria: {\n    style?: string;\n    features?: string[];\n    colors?: string[];\n    materials?: string[];\n  }): Promise<VictorianHouseReference[]> {\n    const allReferences = await this.getAllReferences();\n    \n    return allReferences.filter(ref => {\n      if (searchCriteria.style && !ref.style.toLowerCase().includes(searchCriteria.style.toLowerCase())) {\n        return false;\n      }\n      \n      if (searchCriteria.features && !searchCriteria.features.some(feature => \n        ref.keyFeatures.some(refFeature => refFeature.toLowerCase().includes(feature.toLowerCase()))\n      )) {\n        return false;\n      }\n      \n      if (searchCriteria.colors && !searchCriteria.colors.some(color => \n        ref.colorPalette.some(refColor => refColor.toLowerCase().includes(color.toLowerCase()))\n      )) {\n        return false;\n      }\n      \n      if (searchCriteria.materials && !searchCriteria.materials.some(material => \n        ref.materials.some(refMaterial => refMaterial.toLowerCase().includes(material.toLowerCase()))\n      )) {\n        return false;\n      }\n      \n      return true;\n    });\n  }\n\n  async compareWithCatalogue(referenceId: string): Promise<{\n    reference: VictorianHouseReference;\n    matchingProducts: any[];\n    designSuggestions: string[];\n  }> {\n    const references = await this.getAllReferences();\n    const reference = references.find(ref => ref.id === referenceId);\n    \n    if (!reference) {\n      throw new Error('Victorian reference not found');\n    }\n\n    // This would integrate with your existing product matching logic\n    // For now, return a placeholder that shows the concept\n    return {\n      reference,\n      matchingProducts: [],\n      designSuggestions: [\n        `Consider products that match the ${reference.style} aesthetic`,\n        `Look for items in colors: ${reference.colorPalette.join(', ')}`,\n        `Focus on materials: ${reference.materials.join(', ')}`,\n        `Incorporate architectural elements: ${reference.architecturalElements.join(', ')}`\n      ]\n    };\n  }\n\n  // Predefined Victorian house references\n  async createDefaultReferences() {\n    const defaultReferences = [\n      {\n        name: \"San Francisco Painted Lady\",\n        style: \"Queen Anne Victorian\",\n        keyFeatures: [\"Asymmetrical facade\", \"Bay windows\", \"Ornate trim\", \"Steep-pitched roof\"],\n        colorPalette: [\"Sage Green\", \"Cream\", \"Burgundy\", \"Gold\"],\n        materials: [\"Wood siding\", \"Decorative shingles\", \"Cast iron\"],\n        architecturalElements: [\"Wraparound porch\", \"Decorative brackets\", \"Spindle work\"],\n        description: \"Classic San Francisco Painted Lady showcasing Queen Anne Victorian style\"\n      },\n      {\n        name: \"Gothic Revival Victorian\",\n        style: \"Gothic Revival\",\n        keyFeatures: [\"Pointed arch windows\", \"Steep gables\", \"Vertical emphasis\"],\n        colorPalette: [\"Dark Green\", \"Cream\", \"Brown\"],\n        materials: [\"Brick\", \"Stone trim\", \"Slate roof\"],\n        architecturalElements: [\"Buttresses\", \"Gothic arches\", \"Ornate stonework\"],\n        description: \"Gothic Revival Victorian emphasizing medieval architectural elements\"\n      },\n      {\n        name: \"Second Empire Victorian\",\n        style: \"Second Empire\",\n        keyFeatures: [\"Mansard roof\", \"Dormer windows\", \"Classical details\"],\n        colorPalette: [\"Gray\", \"White\", \"Black\"],\n        materials: [\"Brick\", \"Stone\", \"Slate\"],\n        architecturalElements: [\"Mansard roof\", \"Bracketed cornices\", \"Quoins\"],\n        description: \"Second Empire Victorian with distinctive mansard roof\"\n      }\n    ];\n\n    // Save these as reference metadata without actual images\n    // In a real implementation, you would have actual images for these\n    for (const ref of defaultReferences) {\n      const reference: VictorianHouseReference = {\n        id: `default-${ref.name.toLowerCase().replace(/\\s+/g, '-')}`,\n        ...ref,\n        filePath: '',\n        analysisDate: new Date()\n      };\n      \n      this.saveReferenceMetadata(reference);\n    }\n  }\n}\n\nexport const victorianReferenceService = new VictorianReferenceService();","size_bytes":8652},"client/src/components/mood-board-analyzer.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Upload, Image as ImageIcon, Palette, Package, \n  Eye, Sparkles, X, ChevronRight, ExternalLink\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\n\ninterface MoodBoardAnalysis {\n  visualElements: {\n    colors: Array<{ color: string; hex: string; percentage: number }>;\n    styles: string[];\n    materials: string[];\n    themes: string[];\n  };\n  matchingProducts: Array<{\n    product: Product;\n    matchScore: number;\n    matchReasons: string[];\n  }>;\n  designInsights: string[];\n  suggestions: string[];\n}\n\ninterface MoodBoardAnalyzerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function MoodBoardAnalyzer({ isOpen, onClose }: MoodBoardAnalyzerProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [analysis, setAnalysis] = useState<MoodBoardAnalysis | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const analysisMutation = useMutation({\n    mutationFn: async (imageFile: File) => {\n      const formData = new FormData();\n      formData.append('moodboard', imageFile);\n      \n      const response = await fetch('/api/analyze-moodboard', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to analyze mood board');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAnalysis(data);\n      setIsAnalyzing(false);\n      toast({\n        title: \"Analysis complete\",\n        description: `Found ${data.matchingProducts.length} matching products`,\n      });\n    },\n    onError: (error) => {\n      setIsAnalyzing(false);\n      toast({\n        title: \"Analysis failed\",\n        description: \"Could not analyze the mood board. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      setAnalysis(null);\n    }\n  };\n\n  const handleAnalyze = () => {\n    if (!selectedFile) return;\n    \n    setIsAnalyzing(true);\n    analysisMutation.mutate(selectedFile);\n  };\n\n  const handleReset = () => {\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    setAnalysis(null);\n    setIsAnalyzing(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const renderUploadArea = () => (\n    <div className=\"space-y-6\">\n      <div \n        className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors cursor-pointer\"\n        onClick={() => fileInputRef.current?.click()}\n      >\n        {previewUrl ? (\n          <div className=\"space-y-4\">\n            <img \n              src={previewUrl} \n              alt=\"Mood board preview\"\n              className=\"mx-auto max-h-64 rounded-lg shadow-lg\"\n            />\n            <div className=\"flex items-center justify-center gap-2\">\n              <ImageIcon className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-green-600\">\n                Ready to analyze\n              </span>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-blue-50 rounded-full flex items-center justify-center\">\n              <Upload className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Upload Mood Board</h3>\n              <p className=\"text-gray-600 mt-1\">\n                Upload an image of your design inspiration\n              </p>\n            </div>\n            <Button variant=\"outline\">\n              Choose Image\n            </Button>\n          </div>\n        )}\n      </div>\n      \n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      />\n\n      <div className=\"flex items-center gap-4\">\n        <Button \n          onClick={handleAnalyze}\n          disabled={!selectedFile || isAnalyzing}\n          className=\"flex-1\"\n        >\n          {isAnalyzing ? (\n            <>\n              <Sparkles className=\"h-4 w-4 mr-2 animate-spin\" />\n              Analyzing...\n            </>\n          ) : (\n            <>\n              <Palette className=\"h-4 w-4 mr-2\" />\n              Analyze Mood Board\n            </>\n          )}\n        </Button>\n        \n        {selectedFile && (\n          <Button variant=\"outline\" onClick={handleReset}>\n            <X className=\"h-4 w-4 mr-2\" />\n            Reset\n          </Button>\n        )}\n      </div>\n\n      {isAnalyzing && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>Analyzing visual elements...</span>\n            <span>Please wait</span>\n          </div>\n          <Progress value={undefined} className=\"w-full\" />\n        </div>\n      )}\n    </div>\n  );\n\n  const renderAnalysis = () => {\n    if (!analysis) return null;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Visual Elements */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              Visual Analysis\n            </CardTitle>\n            <CardDescription>\n              Detected colors, styles, and materials from your mood board\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Colors */}\n            <div>\n              <h4 className=\"font-medium mb-2\">Dominant Colors</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {analysis.visualElements.colors.map((color, index) => (\n                  <div key={index} className=\"flex items-center gap-2 bg-gray-50 rounded-lg px-3 py-2\">\n                    <div \n                      className=\"w-4 h-4 rounded-full border\"\n                      style={{ backgroundColor: color.hex }}\n                    />\n                    <span className=\"text-sm font-medium\">{color.color}</span>\n                    <span className=\"text-xs text-gray-500\">{color.percentage}%</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Styles & Materials */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Detected Styles</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {analysis.visualElements.styles.map((style, index) => (\n                    <Badge key={index} variant=\"secondary\">{style}</Badge>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-medium mb-2\">Materials</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {analysis.visualElements.materials.map((material, index) => (\n                    <Badge key={index} variant=\"outline\">{material}</Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Design Insights */}\n            <div>\n              <h4 className=\"font-medium mb-2\">Design Insights</h4>\n              <ul className=\"space-y-1 text-sm text-gray-700\">\n                {analysis.designInsights.map((insight, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <ChevronRight className=\"h-4 w-4 mt-0.5 flex-shrink-0 text-blue-500\" />\n                    {insight}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Matching Products */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Matching Products ({analysis.matchingProducts.length})\n            </CardTitle>\n            <CardDescription>\n              Products from your catalogue that match this mood board\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"max-h-96\">\n              <div className=\"space-y-4\">\n                {analysis.matchingProducts.map((match, index) => (\n                  <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-start gap-4\">\n                        {/* Product Image */}\n                        <div className=\"w-16 h-16 bg-gray-50 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          {match.product.imageUrl ? (\n                            <img\n                              src={match.product.imageUrl}\n                              alt={match.product.specs}\n                              className=\"w-full h-full object-cover rounded-lg\"\n                            />\n                          ) : (\n                            <Package className=\"h-6 w-6 text-gray-400\" />\n                          )}\n                        </div>\n                        \n                        {/* Product Details */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium text-sm truncate\">{match.product.specs}</h4>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                {Math.round(match.matchScore)}% match\n                              </Badge>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {match.product.category}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          <div className=\"text-sm text-gray-600 mb-2\">\n                            <span className=\"font-medium\">£{match.product.hocPrice}</span>\n                            <span className=\"mx-2\">•</span>\n                            <span>{match.product.supplier}</span>\n                          </div>\n                          \n                          <div className=\"text-xs text-gray-500\">\n                            <span className=\"font-medium\">Why it matches:</span>\n                            <span className=\"ml-1\">{match.matchReasons.join(', ')}</span>\n                          </div>\n                          \n                          {match.product.link && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"mt-2\"\n                              onClick={() => window.open(match.product.link, '_blank')}\n                            >\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              View Product\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Suggestions */}\n        {analysis.suggestions.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Sparkles className=\"h-5 w-5\" />\n                Design Suggestions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-sm\">\n                {analysis.suggestions.map((suggestion, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <ChevronRight className=\"h-4 w-4 mt-0.5 flex-shrink-0 text-green-500\" />\n                    {suggestion}\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Palette className=\"h-5 w-5\" />\n            Mood Board Analysis\n          </DialogTitle>\n        </DialogHeader>\n        \n        <ScrollArea className=\"max-h-[70vh] pr-4\">\n          {!analysis ? renderUploadArea() : renderAnalysis()}\n        </ScrollArea>\n        \n        <div className=\"flex items-center justify-between pt-4 border-t\">\n          <div className=\"text-sm text-gray-500\">\n            Upload a mood board image to find matching products\n          </div>\n          <div className=\"flex gap-2\">\n            {analysis && (\n              <Button variant=\"outline\" onClick={handleReset}>\n                Analyze Another\n              </Button>\n            )}\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14598},"client/src/components/pdf-upload.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Upload, FileText, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface PDFUploadProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface UploadResult {\n  message: string;\n  results: {\n    imported: number;\n    errors: string[];\n  };\n}\n\nexport default function PDFUpload({ isOpen, onClose }: PDFUploadProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('pdfFile', file);\n\n      const response = await fetch('/api/upload-pdf', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUploadResult(data);\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"PDF Upload Successful\",\n        description: `Imported ${data.results.imported} products from construction finishes PDF`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === 'application/pdf') {\n      setSelectedFile(file);\n      setUploadResult(null);\n    } else {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select a PDF file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      uploadMutation.mutate(selectedFile);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedFile(null);\n    setUploadResult(null);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5\" />\n            Upload Construction Finishes PDF\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {!uploadResult ? (\n            <>\n              <div className=\"border-2 border-dashed border-neutral-300 rounded-lg p-8 text-center\">\n                <FileText className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                <p className=\"text-sm text-neutral-600 mb-4\">\n                  Upload a construction finishes PDF to extract products, pricing, and specifications\n                </p>\n                <input\n                  type=\"file\"\n                  accept=\".pdf\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  id=\"pdf-upload\"\n                />\n                <label htmlFor=\"pdf-upload\">\n                  <Button variant=\"outline\" className=\"cursor-pointer\" asChild>\n                    <span className=\"flex items-center gap-2\">\n                      <Upload className=\"w-4 h-4\" />\n                      Choose PDF File\n                    </span>\n                  </Button>\n                </label>\n              </div>\n\n              {selectedFile && (\n                <div className=\"bg-neutral-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <FileText className=\"w-5 h-5 text-blue-600\" />\n                      <div>\n                        <p className=\"font-medium text-sm\">{selectedFile.name}</p>\n                        <p className=\"text-xs text-neutral-500\">\n                          {(selectedFile.size / 1024 / 1024).toFixed(1)} MB\n                        </p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={handleUpload}\n                      disabled={uploadMutation.isPending}\n                      className=\"flex items-center gap-2\"\n                    >\n                      {uploadMutation.isPending ? (\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      ) : (\n                        <Upload className=\"w-4 h-4\" />\n                      )}\n                      {uploadMutation.isPending ? 'Processing...' : 'Upload PDF'}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 p-4 bg-green-50 rounded-lg border border-green-200\">\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                <div>\n                  <h3 className=\"font-medium text-green-900\">Upload Successful</h3>\n                  <p className=\"text-sm text-green-700\">\n                    Imported {uploadResult.results.imported} products from PDF\n                  </p>\n                </div>\n              </div>\n\n              {uploadResult.results.errors.length > 0 && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-amber-700\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">Warnings</span>\n                  </div>\n                  <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\">\n                    {uploadResult.results.errors.map((error, index) => (\n                      <p key={index} className=\"text-sm text-amber-700\">{error}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button onClick={handleClose} variant=\"outline\" className=\"flex-1\">\n                  Close\n                </Button>\n                <Button \n                  onClick={() => {\n                    setSelectedFile(null);\n                    setUploadResult(null);\n                  }}\n                  className=\"flex-1\"\n                >\n                  Upload Another\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6794},"client/src/components/victorian-reference-manager.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Upload, Home, Search, Filter, Eye, \n  Archive, Plus, X, ChevronRight, Palette\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VictorianReference {\n  id: string;\n  name: string;\n  style: string;\n  keyFeatures: string[];\n  colorPalette: string[];\n  materials: string[];\n  architecturalElements: string[];\n  filePath: string;\n  description: string;\n  analysisDate: string;\n}\n\ninterface VictorianReferenceManagerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function VictorianReferenceManager({ isOpen, onClose }: VictorianReferenceManagerProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [searchFilter, setSearchFilter] = useState(\"\");\n  const [selectedReference, setSelectedReference] = useState<VictorianReference | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: references = [], isLoading } = useQuery<VictorianReference[]>({\n    queryKey: ['/api/victorian-references'],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('victorian-image', file);\n      \n      const response = await fetch('/api/save-victorian-reference', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to save Victorian reference');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/victorian-references'] });\n      setSelectedFile(null);\n      setIsUploading(false);\n      toast({\n        title: \"Reference saved\",\n        description: \"Victorian house reference has been analyzed and saved\",\n      });\n    },\n    onError: () => {\n      setIsUploading(false);\n      toast({\n        title: \"Upload failed\",\n        description: \"Could not save the Victorian reference\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const handleUpload = () => {\n    if (!selectedFile) return;\n    setIsUploading(true);\n    uploadMutation.mutate(selectedFile);\n  };\n\n  const filteredReferences = references.filter(ref =>\n    ref.name.toLowerCase().includes(searchFilter.toLowerCase()) ||\n    ref.style.toLowerCase().includes(searchFilter.toLowerCase()) ||\n    ref.keyFeatures.some(feature => \n      feature.toLowerCase().includes(searchFilter.toLowerCase())\n    )\n  );\n\n  const renderUploadSection = () => (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Plus className=\"h-5 w-5\" />\n          Add Victorian House Reference\n        </CardTitle>\n        <CardDescription>\n          Upload photos of traditional Victorian houses to build your reference library\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div \n          className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors cursor-pointer\"\n          onClick={() => fileInputRef.current?.click()}\n        >\n          {selectedFile ? (\n            <div className=\"space-y-2\">\n              <Home className=\"h-8 w-8 text-green-600 mx-auto\" />\n              <p className=\"font-medium text-green-600\">{selectedFile.name}</p>\n              <p className=\"text-sm text-gray-500\">Ready to analyze</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Upload className=\"h-8 w-8 text-gray-400 mx-auto\" />\n              <p className=\"font-medium\">Upload Victorian House Photo</p>\n              <p className=\"text-sm text-gray-500\">Click to select an image file</p>\n            </div>\n          )}\n        </div>\n\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleUpload}\n            disabled={!selectedFile || isUploading}\n            className=\"flex-1\"\n          >\n            {isUploading ? (\n              <>\n                <Archive className=\"h-4 w-4 mr-2 animate-pulse\" />\n                Analyzing...\n              </>\n            ) : (\n              <>\n                <Archive className=\"h-4 w-4 mr-2\" />\n                Save Reference\n              </>\n            )}\n          </Button>\n          \n          {selectedFile && (\n            <Button \n              variant=\"outline\" \n              onClick={() => setSelectedFile(null)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n\n        {isUploading && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>Analyzing architectural features...</span>\n              <span>Please wait</span>\n            </div>\n            <Progress value={undefined} className=\"w-full\" />\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const renderReferencesLibrary = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Archive className=\"h-5 w-5\" />\n          Victorian Reference Library ({references.length})\n        </CardTitle>\n        <CardDescription>\n          Your collection of traditional Victorian house references\n        </CardDescription>\n        \n        <div className=\"flex items-center gap-2 mt-4\">\n          <Search className=\"h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search by style, features, or name...\"\n            value={searchFilter}\n            onChange={(e) => setSearchFilter(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"max-h-96\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <Progress value={undefined} className=\"w-32 mx-auto\" />\n              <p className=\"text-sm text-gray-500 mt-2\">Loading references...</p>\n            </div>\n          ) : filteredReferences.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Home className=\"h-12 w-12 text-gray-300 mx-auto mb-2\" />\n              <p className=\"text-gray-500\">No Victorian references found</p>\n              <p className=\"text-sm text-gray-400\">Upload some photos to get started</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredReferences.map((ref) => (\n                <Card \n                  key={ref.id} \n                  className=\"border-l-4 border-l-purple-500 hover:shadow-md transition-shadow cursor-pointer\"\n                  onClick={() => setSelectedReference(ref)}\n                >\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{ref.name}</h4>\n                        <Badge variant=\"secondary\" className=\"mt-1\">\n                          {ref.style}\n                        </Badge>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-2 text-sm\">\n                      <div>\n                        <span className=\"font-medium\">Key Features:</span>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {ref.keyFeatures.slice(0, 3).map((feature, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {feature}\n                            </Badge>\n                          ))}\n                          {ref.keyFeatures.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{ref.keyFeatures.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <span className=\"font-medium\">Colors:</span>\n                        <div className=\"flex gap-1 mt-1\">\n                          {ref.colorPalette.slice(0, 4).map((color, index) => (\n                            <div\n                              key={index}\n                              className=\"w-4 h-4 rounded-full border border-gray-300\"\n                              style={{ backgroundColor: color }}\n                              title={color}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n\n  const renderReferenceDetail = () => {\n    if (!selectedReference) return null;\n\n    return (\n      <Dialog open={!!selectedReference} onOpenChange={() => setSelectedReference(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Home className=\"h-5 w-5\" />\n              {selectedReference.name}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"font-medium\">Style</Label>\n                <Badge variant=\"default\" className=\"mt-1\">{selectedReference.style}</Badge>\n              </div>\n              <div>\n                <Label className=\"font-medium\">Analysis Date</Label>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {new Date(selectedReference.analysisDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"font-medium\">Description</Label>\n              <p className=\"text-sm text-gray-700 mt-1\">{selectedReference.description}</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"font-medium\">Key Features</Label>\n                <ul className=\"text-sm mt-1 space-y-1\">\n                  {selectedReference.keyFeatures.map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-2\">\n                      <ChevronRight className=\"h-3 w-3 text-blue-500 flex-shrink-0\" />\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              \n              <div>\n                <Label className=\"font-medium\">Materials</Label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {selectedReference.materials.map((material, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {material}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"font-medium\">Color Palette</Label>\n              <div className=\"flex gap-2 mt-1\">\n                {selectedReference.colorPalette.map((color, index) => (\n                  <div key={index} className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-6 h-6 rounded-full border border-gray-300\"\n                      style={{ backgroundColor: color }}\n                    />\n                    <span className=\"text-xs\">{color}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"font-medium\">Architectural Elements</Label>\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {selectedReference.architecturalElements.map((element, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {element}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex justify-between pt-4 border-t\">\n              <Button variant=\"outline\" onClick={() => setSelectedReference(null)}>\n                Close\n              </Button>\n              <Button\n                onClick={() => {\n                  // TODO: Integrate with mood board analyzer\n                  toast({\n                    title: \"Feature coming soon\",\n                    description: \"Compare with catalogue functionality will be available soon\",\n                  });\n                }}\n              >\n                <Palette className=\"h-4 w-4 mr-2\" />\n                Compare with Catalogue\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Home className=\"h-5 w-5\" />\n            Victorian House References\n          </DialogTitle>\n        </DialogHeader>\n        \n        <ScrollArea className=\"max-h-[70vh] pr-4\">\n          <div className=\"space-y-6\">\n            {renderUploadSection()}\n            {renderReferencesLibrary()}\n          </div>\n        </ScrollArea>\n        \n        <div className=\"flex items-center justify-between pt-4 border-t\">\n          <div className=\"text-sm text-gray-500\">\n            Build a library of Victorian house references for design comparisons\n          </div>\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n      \n      {renderReferenceDetail()}\n    </Dialog>\n  );\n}","size_bytes":15242}}}